# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeostatisticsTrial
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime
import uuid

from qgis.PyQt import QtCore, QtWidgets, uic
from qgis.PyQt.QtWidgets import QHeaderView

from ...core.services.widget_service import WidgetService
from ...core.constants import *
from ...core.services.layer_service import LayerService
from ...core.services.system_service import SystemService
from ...core.services.message_service import MessageService
from ...core.factories.postgres_factory import PostgresFactory

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), 'geostatistics_trial_new.ui')
)


class GeostatisticsTrial(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, project):
        """Constructor."""
        super(GeostatisticsTrial, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("Geostatistics Trial Information")
        self.iface = iface
        self.project = project
        self.layer_services = LayerService(self.iface)
        self.setTrialWidget()
        self.loadTrialData()
        self.fetchDomain()
        self.fetchLpcTeam()
        self.fetchCropData()
        self.fetchFarmerData()

        self.trialFieldNameLineEdit.editingFinished.connect(self.setQgisProjectName)
        self.trialAddPushButton.clicked.connect(self.register)
        self.trialEditPushButton.clicked.connect(self.updateTrialWidget)
        self.trialDeletePushButton.clicked.connect(self.deleteTrial)

    @staticmethod
    def updateLabel(qtLabel, newLabelText):
        qtLabel.clear()
        qtLabel.setText(newLabelText)

    @staticmethod
    def fetchOne(baseSql, objectId):
        objectSql = baseSql.format(objectId)
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        return PostgresFactory().getSqlExecutor(connection, objectSql)

    @staticmethod
    def resultMessage(result, title, message):
        if isinstance(result, bool):
            MessageService().messageBox(title, message, 3, 1)
        else:
            MessageService().messageBox(title, result[1], 5, 1)

    @staticmethod
    def populateTable(result, tableWidget):
        tableWidget.clearContents()

        if not result:
            tableWidget.setRowCount(1)
            return

        tableWidget.setRowCount(len(result))
        keys = result[0].keys()
        tableWidget.setColumnCount(len(keys))

        for rowIdx, row in enumerate(result):
            for colIdx, key in enumerate(keys):
                value = row[key]
                if isinstance(value, datetime.datetime):
                    value = value.strftime("%d/%m/%Y") if value else ""

                item = QtWidgets.QTableWidgetItem(str(value))
                tableWidget.setItem(rowIdx, colIdx, item)

    def setTrialWidget(self):
        self.trialTableWidget.setHorizontalHeaderLabels(GEOSTATISTIC_TRIAL)
        self.trialTableWidget.verticalHeader().setVisible(True)
        self.trialTableWidget.setColumnHidden(0, True)
        self.trialTableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.trialTableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.trialIDLabel.hide()

    def updateTrialWidget(self):
        selectedData = WidgetService.getSelectedData(self.trialTableWidget, 11, 'Updating data')

        if selectedData:
            currentRow, data = selectedData
            self.geostatisticsTrialGroupBox.setTitle('Update trial')
            self.trialIDLabel.setText(data[0])
            self.trialFieldNameLineEdit.setText(data[1])
            self.trialFieldAreaLineEdit.setText(data[2])
            self.trialIrrigatedComboBox.setCurrentIndex(self.trialIrrigatedComboBox.findText(data[3]))
            self.trialSoilTypeLineEdit.setText(data[4])
            self.lpcTeamComboBox.setCurrentIndex(self.lpcTeamComboBox.findText(data[5]))
            self.farmerComboBox.setCurrentIndex(self.farmerComboBox.findText(data[6]))
            self.cropFieldComboBox.setCurrentIndex(self.cropFieldComboBox.findText(data[7]))
            self.trialAddPushButton.setText('Update')
        else:
            MessageService().messageBox('Updating data', 'No data selected.', 5, 1)

    def clearTrialWidget(self):
        self.trialIDLabel.setText('noid')
        self.trialFieldNameLineEdit.clear()
        self.trialFieldAreaLineEdit.clear()
        self.trialSoilTypeLineEdit.clear()
        self.lpcTeamComboBox.setCurrentIndex(0)
        self.farmerComboBox.setCurrentIndex(0)
        self.cropFieldComboBox.setCurrentIndex(0)

    def register(self):
        # TODO move register to the factory
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        buttonType = self.trialAddPushButton.text()

        if buttonType == 'Update':
            sql = UPDATE_TRIAL_SQL
            data = self.prepareTrialData()
            self.trialAddPushButton.setText('Add')
            self.geostatisticsTrialGroupBox.setTitle('Add crop')
        else:
            sql = INSERT_TRIAL_SQL
            data = self.prepareTrialData()

        result = PostgresFactory().postSqlExecutor(connection, sql, data)
        self.loadTrialData()
        self.clearTrialWidget()
        self.resultMessage(result, 'Trial management', 'Data saved successfully!')

    def deleteTrial(self):
        selectedData = WidgetService.getSelectedData(self.trialTableWidget, 11, 'Deleting data')

        if selectedData:
            currentRow, data = selectedData
            connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
            result = PostgresFactory().postSqlExecutor(connection, DELETE_TRIAL.format(data[0]))
            self.loadTrialData()
            self.resultMessage(result, 'Deleting data', 'Data deleted successfully!')
        else:
            MessageService().messageBox('Deleting data', 'No data selected.', 5, 1)

    def prepareTrialData(self):
        teamId = self.lpcTeamComboBox.itemData(self.lpcTeamComboBox.currentIndex())
        farmerId = self.farmerComboBox.itemData(self.farmerComboBox.currentIndex())
        cropId = self.cropFieldComboBox.itemData(self.cropFieldComboBox.currentIndex())
        irrigated = self.trialIrrigatedComboBox.itemData(self.trialIrrigatedComboBox.currentIndex())

        trialData = [
            self.trialFieldNameLineEdit.text(),
            self.trialFieldAreaLineEdit.text(),
            irrigated,
            self.trialSoilTypeLineEdit.text(),
            teamId,
            farmerId,
            cropId,
            15,
            SystemService().createDate()
        ]
        if self.trialIDLabel.text() != 'noid':
            trialData.append(self.trialIDLabel.text())

        return tuple(trialData)

    def loadTrialData(self):
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, FETCH_ALL_TRIAL)

        if len(result) > 0:
            self.tableDataFormatter(result)
        else:
            self.populateTable(result, self.trialTableWidget)

    def tableDataFormatter(self, result):
        for row in result:
            lpcTeamName = self.fetchOne(FETCH_ONE_TEAM, row['lpc_team'])
            farmer = self.fetchOne(FETCH_ONE_FARMER, row['farmer'])
            crop = self.fetchOne(FETCH_ONE_CROP, row['crop_trial'])

            row['lpc_team'] = f"{lpcTeamName[0]['first_name']} {lpcTeamName[0]['last_name']}"
            row['farmer'] = f"{farmer[0]['first_name']} {farmer[0]['last_name']}"
            row['crop_trial'] = f"{crop[0]['crop_name']} - {crop[0]['variety']}"

        self.populateTable(result, self.trialTableWidget)

    def fetchDomain(self):
        # TODO move register to the factory
        self.trialIrrigatedComboBox.clear()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, FETCH_ALL_DOMAIN)

        if len(result) == 0:
            full_name = ['There are no data registered!']
            self.trialIrrigatedComboBox.addItems(full_name)
            return False
        else:
            self.trialIrrigatedComboBox.insertItem(0, 'Select an option', uuid.uuid4())
            for row in result:
                self.trialIrrigatedComboBox.addItem(f"{row['description']}", row['code'])

            return True

    def fetchLpcTeam(self):
        # TODO move register to the factory
        self.lpcTeamComboBox.clear()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, FETCH_ALL_TEAM)

        if len(result) == 0:
            full_name = ['There are no data registered!']
            self.lpcTeamComboBox.addItems(full_name)
            return False
        else:
            self.lpcTeamComboBox.insertItem(0, 'Select an option', uuid.uuid4())
            for row in result:
                self.lpcTeamComboBox.addItem(f"{row['first_name']} {row['last_name']}", row['id'])

            return True

    def fetchCropData(self):
        # TODO move register to the factory
        self.cropFieldComboBox.clear()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, FETCH_ALL_CROP)

        if len(result) == 0:
            cropData = ['There are no data registered!']
            self.cropFieldComboBox.addItems(cropData)
            return False
        else:
            self.cropFieldComboBox.insertItem(0, 'Select an option', uuid.uuid4())
            for row in result:
                self.cropFieldComboBox.addItem(f"{row['crop_name']} - {row['variety']}", row['id'])
            return True

    def fetchFarmerData(self):
        # TODO move register to the factory
        self.farmerComboBox.clear()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, FETCH_ALL_FARMER)

        if len(result) == 0:
            farmerData = ['There are no data registered!']
            self.farmerComboBox.addItems(farmerData)
            return False
        else:
            self.farmerComboBox.insertItem(0, 'Select an option', uuid.uuid4())
            for row in result:
                self.farmerComboBox.addItem(f"{row['first_name']} {row['last_name']}", row['id'])
            return True

    def setQgisProjectName(self):
        self.updateLabel(self.qgisProjectLineEdit, self.trialFieldNameLineEdit.text())

    def saveQgisProject(self):
        self.project.setCrs(self.qgisProjectCrsWidget.crs())
        self.project.write(f'{self.qgisProjectDirectoryFileWidget.filePath()}/{self.qgisProjectLineEdit.text()}.qgs')

        if self.trialDirectoryStructureCheckBox.isChecked():
            SystemService().createDirectoryStructure(self.qgisProjectDirectoryFileWidget.filePath())