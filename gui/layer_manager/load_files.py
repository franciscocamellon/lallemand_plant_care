# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LoadFiles
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import QtWidgets
from qgis.core import QgsCoordinateReferenceSystem

from .ui_load_files import Ui_LoadFilesDialog
from ...core.constants import QGIS_TOC_GROUPS, POLYGONS_BUILDER_METHODS
from ...core.services.layer_service import LayerService
from ...core.services.system_service import SystemService
from ...core.services.widget_service import WidgetService
from ...core.tools.algorithm_runner import AlgorithmRunner


class LoadFiles(QtWidgets.QDialog, Ui_LoadFilesDialog):

    def __init__(self):
        """Constructor."""
        super(LoadFiles, self).__init__()
        self.setupUi(self)
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.crsOperations = ''
        self.gpsLayer = ''
        self.gpsLayerName = ''
        self.harvesterLayer = ''
        self.harvesterLayerName = ''

        self.crsWarningLabel.hide()
        self.harvesterCrsWarningLabel.hide()
        self.suggestedCrsSelectionWidget.setEnabled(False)
        self.harvesterCrsSelectionWidget.setEnabled(False)

        self.methodComboBox.insertItems(0, POLYGONS_BUILDER_METHODS)
        self.methodComboBox.setEnabled(False)
        self.sortingFieldComboBox.setEnabled(False)

        self.reprojectCheckBox.stateChanged.connect(self.gpsReprojectWidget)
        self.treatmentCheckBox.stateChanged.connect(self.enableTreatmentChildren)
        self.harvesterReprojectCheckBox.stateChanged.connect(self.harvesterReprojectWidget)
        self.gpsFileWidget.fileChanged.connect(self.updateGpsUI)
        self.harvesterFileWidget.fileChanged.connect(self.updateHarvesterUI)
        self.loadGpsPointsPushButton.clicked.connect(self.loadGpsPoints)
        self.loadHarvesterPointsPushButton.clicked.connect(self.loadHarvesterPoints)

    def updateGpsUI(self, path):
        if path:
            self.gpsLayerName = self.systemService.extractFileName(path)
            self.gpsLayer = self.layerService.create_vector_layer(self.gpsLayerName, path)

            self.sortingFieldComboBox.setFields(self.gpsLayer.fields())

            if self.gpsLayer.crs().isGeographic():
                self.crsWarningLabel.show()
                crsInfo = self.layerService.getSuggestedCrs(self.gpsLayer)
                self.crsOperations = crsInfo
                self.suggestedCrsSelectionWidget.setCrs(QgsCoordinateReferenceSystem(crsInfo[1]))
            else:
                self.crsWarningLabel.hide()
                self.suggestedCrsSelectionWidget.setCrs(self.gpsLayer.crs())

            self.gpsCRSLabel.setText(f'CRS -> {self.gpsLayer.crs().authid()}')

    def updateHarvesterUI(self, path):
        if path:
            self.harvesterLayerName = self.systemService.extractFileName(path)
            self.harvesterLayer = self.layerService.create_vector_layer(self.harvesterLayerName, path)

            if self.harvesterLayer.crs().isGeographic():
                self.harvesterCrsWarningLabel.show()
                crsInfo = self.layerService.getSuggestedCrs(self.harvesterLayer)
                self.crsOperations = crsInfo
                self.harvesterCrsSelectionWidget.setCrs(QgsCoordinateReferenceSystem(crsInfo[1]))
            else:
                self.harvesterCrsWarningLabel.hide()
                self.harvesterCrsSelectionWidget.setCrs(self.harvesterLayer)

            self.harvesterCRSLabel.setText(f'CRS -> {self.harvesterLayer.crs().authid()}')

    def loadGpsPoints(self):
        # path = self.layerService.checkForSavedProject()
        # print(path)
        epsg = self.suggestedCrsSelectionWidget.crs().authid()

        if self.reprojectCheckBox.isChecked():
            reprojected = AlgorithmRunner.runReprojectLayer(self.gpsLayer, epsg, self.crsOperations[2])

            reprojected.setName(f'{self.gpsLayerName}_{self.crsOperations[0]}')

            LayerService.addMapLayer(self.gpsLayer, QGIS_TOC_GROUPS[0])
            LayerService.addMapLayer(reprojected, QGIS_TOC_GROUPS[1])
        else:
            LayerService.addMapLayer(self.gpsLayer, QGIS_TOC_GROUPS[0])
        self.clearGpsWidget()

        # if self.treatmentCheckBox.isChecked():
        #     polygons = AlgorithmRunner.runWaypointsPolygonsBuilder(layer,
        #     self.methodComboBox.currentIndex(), self.sortingFieldComboBox.currentField())
        #     print(polygons)
        #

    def loadHarvesterPoints(self):

        epsg = self.harvesterCrsSelectionWidget.crs().authid()

        if self.harvesterReprojectCheckBox.isChecked():
            reprojected = AlgorithmRunner.runReprojectLayer(self.harvesterLayer, epsg, self.crsOperations[2])

            reprojected.setName(f'{self.harvesterLayerName}_{self.crsOperations[0]}')
            LayerService.addMapLayer(self.harvesterLayer, QGIS_TOC_GROUPS[0])
            LayerService.addMapLayer(reprojected, QGIS_TOC_GROUPS[1])
        else:
            LayerService.addMapLayer(self.harvesterLayer, QGIS_TOC_GROUPS[0])

        self.clearHarvesterWidget()

    def gpsReprojectWidget(self, state):
        WidgetService.enableWidget(self.suggestedCrsSelectionWidget, state)

    def harvesterReprojectWidget(self, state):
        WidgetService.enableWidget(self.harvesterCrsSelectionWidget, state)

    def enableTreatmentChildren(self, state):
        widgets = [self.methodComboBox, self.sortingFieldComboBox]
        for widget in widgets:
            WidgetService.enableWidget(widget, state)

    def clearGpsWidget(self):
        widgets = [self.gpsFileWidget,
                   self.gpsCRSLabel,
                   self.crsWarningLabel,
                   self.reprojectCheckBox,
                   self.treatmentCheckBox,
                   self.boundaryCheckBox]
        for widget in widgets:
            WidgetService.clearWidget(widget)

    def clearHarvesterWidget(self):
        widgets = [self.harvesterCRSLabel,
                   self.harvesterCrsWarningLabel,
                   self.harvesterFileWidget,
                   self.harvesterReprojectCheckBox,
                   self.yieldFilteringCheckBox,
                   self.treatmentFilteringCheckBox,
                   self.percentualFilteringCheckBox]
        for widget in widgets:
            WidgetService.clearWidget(widget)
