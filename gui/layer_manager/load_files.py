# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreateProject
                                 A QGIS plugin
 Lallemand - Crop Analysis Environment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from qgis.PyQt import QtWidgets, uic

from ...core.services.layer_service import LayerService

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), 'load_files_dialog.ui')
)

class LoadFiles(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, iface, project, parent=None):
        """Constructor."""
        super(LoadFiles, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.project = project
        self.layer_services = LayerService(self.iface)
        self.load_pb.clicked.connect(self.load_shape_file)

    def load_shape_file(self):
        group_name = self.retrieve_group_name(self.harvester_rb.isChecked(), self.gps_rb.isChecked())
        self.layer_services.load_shape_file(self.project, group_name, self.load_file_fw.filePath())

    @staticmethod
    def retrieve_group_name(harvester, gps):
        if harvester:
            return 'Harvester points'
        elif harvester is False and gps is False:
            return None
        else:
            return 'GPS points'