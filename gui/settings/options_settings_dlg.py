# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PostgresFactory
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings
from qgis.PyQt.QtGui import QIcon
from qgis.gui import QgsOptionsWidgetFactory, QgsOptionsPageWidget

from .options_settings_dlg_base import Ui_OptionsSettingsForm

SETTINGS_KEY = "LPC/postgresConnection"


class OptionsSettingsFactory(QgsOptionsWidgetFactory):

    def __init__(self):
        super().__init__()

    def icon(self):
        return QIcon(':plugins/lallemand_plant_care/icons/lallemand.png')

    def createWidget(self, parent=None):
        return OptionsSettingsPage(parent)


class OptionsSettingsPage(QgsOptionsPageWidget, Ui_OptionsSettingsForm):

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.settings = QSettings()
        self.loadSettings()

    def apply(self):
        self.saveSettings()

    def saveSettings(self):
        self.saveServerSettings()
        self.saveTreatmentPolygonsSettings()

    def loadSettings(self):
        self.loadServerSettings()
        self.loadTreatmentPolygonsSettings()

    def saveServerSettings(self):
        self.settings.setValue('LPC/database', self.databaseNameLineEdit.text())
        self.settings.setValue('LPC/host', self.serverIpLineEdit.text())
        self.settings.setValue('LPC/port', self.serverPortLineEdit.text())
        self.settings.setValue('LPC/user', self.serverUserLineEdit.text())
        self.settings.setValue('LPC/password', self.serverPasswordLineEdit.text())

    def loadServerSettings(self):
        self.databaseNameLineEdit.setText(self.settings.value('LPC/database'))
        self.serverIpLineEdit.setText(self.settings.value('LPC/host'))
        self.serverPortLineEdit.setText(self.settings.value('LPC/port'))
        self.serverUserLineEdit.setText(self.settings.value('LPC/user'))
        self.serverPasswordLineEdit.setText(self.settings.value('LPC/password'))

    def getServerSettings(self):
        return {
            'database': self.settings.value('LPC/database'),
            'host': self.settings.value('LPC/host'),
            'port': self.settings.value('LPC/port'),
            'user': self.settings.value('LPC/user'),
            'password': self.settings.value('LPC/password')
        }

    def saveTreatmentPolygonsSettings(self):
        self.settings.setValue('LPC/odd_polygons', self.oddPolygonsNameLineEdit.text())
        self.settings.setValue('LPC/even_polygons', self.evenPolygonsNameLineEdit.text())

    def loadTreatmentPolygonsSettings(self):
        self.oddPolygonsNameLineEdit.setText(self.settings.value('LPC/odd_polygons'))
        self.evenPolygonsNameLineEdit.setText(self.settings.value('LPC/even_polygons'))

    def getTreatmentPolygonsSettings(self):
        return (
            self.settings.value('LPC/odd_polygons'),
            self.settings.value('LPC/even_polygons')
        )
