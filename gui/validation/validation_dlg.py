# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentPolygons
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math
from typing import Optional

from qgis.utils import plugins
from qgis.PyQt import QtWidgets
from qgis.PyQt.Qt import QVariant
from qgis.core import QgsFieldProxyModel, QgsMapLayerProxyModel, QgsTask, QgsProcessingContext

from ...core.constants import VALIDATION_FIELDS
from ...core.services.system_service import SystemService
from ...core.tools.algorithm_runner import AlgorithmRunner
from ...core.services.message_service import MessageService, UserFeedback
from .validation_dlg_base import Ui_Dialog
from ..settings.options_settings_dlg import OptionsSettingsPage
from ...core.services.layer_service import LayerService
from ...core.services.widget_service import WidgetService


class SamplingValidation(QtWidgets.QDialog, Ui_Dialog):

    def __init__(self, iface, project, parent=None):
        """Constructor."""
        super(SamplingValidation, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.project = project
        self.setWindowTitle('Sampling validation')
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.context = QgsProcessingContext()
        self.setValidationGui()
        self.validatePushButton.clicked.connect(self.runValidate)

    def setValidationGui(self):
        layers = self.project.instance().mapLayers()
        samplingLayer = self.layerService.filterByLayerName(list(layers.values()), ['validation'])

        self.validationLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.validationLayerComboBox.setExceptedLayerList(samplingLayer)

        self.krigingRasterComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.fieldToEstimateComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.fieldToEstimateComboBox.setLayer(self.validationLayerComboBox.currentLayer())

    def runValidate(self):
        grid = self.krigingRasterComboBox.currentLayer()
        points = self.validationLayerComboBox.currentLayer()
        field = self.fieldToEstimateComboBox.currentField()
        feedback = UserFeedback()
        output = AlgorithmRunner().runAddRasterValuesToPoints(points, [grid], context=self.context, feedback=feedback)

        fieldName = self.systemService.getFieldName(grid.name())

        output.startEditing()
        for feature in output.getFeatures():
            feature[VALIDATION_FIELDS[0]] = feature[fieldName]
            output.updateFeature(feature)
            feature[VALIDATION_FIELDS[1]] = feature[field] - feature[fieldName]
            feature[VALIDATION_FIELDS[2]] = math.pow(feature[VALIDATION_FIELDS[1]], 2)
            output.updateFeature(feature)
        output.commitChanges()
        output.triggerRepaint()

        errorStatistics = AlgorithmRunner().runBasicStatisticsForFields(output, VALIDATION_FIELDS[2],
                                                                        context=self.context,
                                                                        feedback=feedback)
        variableStatistics = AlgorithmRunner().runBasicStatisticsForFields(output, field,
                                                                           context=self.context,
                                                                           feedback=feedback)
        rmse = math.sqrt(errorStatistics['SUM'] / errorStatistics['COUNT'])
        percentualRmse = (rmse / (variableStatistics['SUM'] / variableStatistics['COUNT'])) * 100

        output.startEditing()
        for feature in output.getFeatures():
            if isinstance(feature[fieldName], QVariant):
                pass
            else:
                feature[VALIDATION_FIELDS[3]] = rmse
                feature[VALIDATION_FIELDS[4]] = percentualRmse
                output.updateFeature(feature)
        output.commitChanges()
        output.triggerRepaint()

        fieldsToDelete = self.layerService.filterByFieldName(output, [fieldName], inverse=False)
        newOutput = self.layerService.deleteFields(output, fieldsToDelete)

        pointsProvider = points.dataProvider()
        points.selectAll()
        points.startEditing()
        points.deleteSelectedFeatures()
        featureList = [feature for feature in newOutput.getFeatures()]
        pointsProvider.addFeatures(featureList)
        points.commitChanges()
        points.triggerRepaint()
        points.invertSelection()

        feedback.close()
