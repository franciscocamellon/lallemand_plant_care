# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentPolygons
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt import QtWidgets
from qgis.core import QgsFieldProxyModel, QgsProject, QgsMapLayerProxyModel

from ...core.services.message_service import UserFeedback
from ...core.constants import POLYGONS_BUILDER_METHODS, QGIS_TOC_GROUPS, FILTERING_TARGET_PROJECTION, \
    FILTERING_COLONNE_DATE
from .filtering_dlg_base import Ui_FilteringPointsDialogBase
from ...core.services.layer_service import LayerService
from ...core.services.system_service import SystemService
from ...core.services.widget_service import WidgetService
from ...core.tools.algorithm_runner import AlgorithmRunner
from ..settings.options_settings_dlg import OptionsSettingsPage


class FilteringPoints(QtWidgets.QDialog, Ui_FilteringPointsDialogBase):

    def __init__(self, project, parent=None):
        """Constructor."""
        super(FilteringPoints, self).__init__(parent)
        self.setupUi(self)
        self.project = project
        self.settings = OptionsSettingsPage().getTreatmentPolygonsSettings()
        self.setWindowTitle('Filtering harvester points')
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.setMapLayerCombobox()
        self.yeldFilterPushButton.clicked.connect(self.runFilter)

    def setMapLayerCombobox(self):
        layers = self.project.instance().mapLayers()
        if len(layers) == 0:
            self.harvesterLayerComboBox.setEnabled(False)
        else:
            # self.harvesterLayerComboBox.setLayer(list(layers.values())[0])
            boundaryLayer = self.layerService.filterByLayerName(list(layers.values()), 'contour')
            treatmentLayer = self.layerService.filterByLayerName(list(layers.values()), 'treatment')

            self.harvesterLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.treatmentLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.treatmentLayerComboBox.setExceptedLayerList(treatmentLayer)
            self.boundaryLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.boundaryLayerComboBox.setExceptedLayerList(boundaryLayer)

            self.targetProjection.insertItems(0, FILTERING_TARGET_PROJECTION)
            self.colonneDateComboBox.insertItems(0, FILTERING_COLONNE_DATE)

            self.setLayerFields()

    def setLayerFields(self):
        self.harvesterDatageComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.harvesterLayerYeldComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.treatmentLayerIdComboBox.setFilters(QgsFieldProxyModel.Numeric)

        self.harvesterDatageComboBox.setLayer(self.harvesterLayerComboBox.currentLayer())
        self.harvesterLayerYeldComboBox.setLayer(self.harvesterLayerComboBox.currentLayer())
        self.treatmentLayerIdComboBox.setLayer(self.treatmentLayerComboBox.currentLayer())

    def enableWidget(self, state):
        widgets = [self.yieldFilteringCheckBox, self.treatmentFilteringCheckBox, self.percentualFilteringCheckBox]
        for widget in widgets:
            WidgetService.enableWidget(widget, state)

    def runFilter(self):
        filePath = self.project.homePath()
        self.filterMapLayer = f"{filePath}/00_Data/00_Raw_Files/{f'{self.harvesterLayerComboBox.currentLayer().name()}'}_filtermap.shp"
        self.rPlots = f"{filePath}/00_Data/00_Raw_Files/rPlots.html"
        self.tableErrors = f"{filePath}/00_Data/00_Raw_Files/table_errors.csv"
        filterParameters = self.getFilterParameters()
        feedback = UserFeedback()
        AlgorithmRunner.runYieldMapFiltering(filterParameters, feedback=feedback,)
        feedback.close()
        self.layerService.loadShapeFile(QGIS_TOC_GROUPS[0], self.filterMapLayer)

    def getFilterParameters(self):

        return {

            'Contour': self.boundaryLayerComboBox.currentLayer(),
            'Polygones_traitement': self.treatmentLayerComboBox.currentLayer(),
            'Identifiant_polygones': self.treatmentLayerIdComboBox.currentField(),
            'Carte_rendement': self.harvesterLayerComboBox.currentLayer(),
            'Datage': self.harvesterDatageComboBox.currentField(),
            'Rendement': self.harvesterLayerYeldComboBox.currentField(),

            'Target_Projection': self.targetProjection.currentIndex(),
            'Polygones_pairs': 'T2',
            'Polygones_impairs': 'T1',

            'Colonne_date': self.colonneDateComboBox.currentIndex(),

            'Largeur_coupe': 0, 'Sous_Echantillonnage': 1,
            'RPLOTS': self.rPlots, 'Carte_filtree': self.filterMapLayer,
            'Table_errors': self.tableErrors
        }
