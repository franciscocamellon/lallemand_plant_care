# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentPolygons
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from typing import Optional

from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.core import QgsFieldProxyModel, QgsMapLayerProxyModel, QgsApplication, \
    QgsTask, QgsCoordinateReferenceSystem

from .filtering_dlg_base import Ui_Dialog
from ..settings.options_settings_dlg import OptionsSettingsPage
from ...core.constants import FILTERING_TARGET_PROJECTION, \
    FILTERING_COLONNE_DATE
from ...core.services.layer_service import LayerService
from ...core.services.system_service import SystemService
from ...core.services.widget_service import WidgetService
from ...core.tasks.filter_task import FilterTask
from ...core.tasks.sampling_task import SamplingTask


class FilteringPoints(QtWidgets.QDialog, Ui_Dialog):

    def __init__(self, iface, project, parent=None):
        """Constructor."""
        super(FilteringPoints, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.project = project
        self.filePath = self.project.homePath()
        self.settings = OptionsSettingsPage().getTreatmentPolygonsSettings()
        self.kriging = OptionsSettingsPage().getKrigingSettings()
        self.setWindowTitle('Filtering harvester points')
        self.progress_bar: Optional[QProgressBar] = None
        self.task: Optional[QgsTask] = None
        self.samplingTask: Optional[QgsTask] = None
        self.total = 0
        self.crsOperations = ''
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.widgetService = WidgetService()
        self.suggestedCrsSelectionWidget.setEnabled(False)
        self.setMapLayerCombobox()
        self.updateFilteringGui()
        self.updateSamplingGui()
        self.harvesterLayerComboBox.layerChanged.connect(self.updateFilteringGui)
        self.samplingLayerComboBox.layerChanged.connect(self.updateSamplingGui)
        self.yeldFilterPushButton.clicked.connect(self.runFilter)
        self.samplerPushButton.clicked.connect(self.runSampling)

    def setMapLayerCombobox(self):
        layers = self.project.instance().mapLayers()
        if len(layers) == 0:
            self.harvesterLayerComboBox.setEnabled(False)
        else:
            harvesterLayer = self.layerService.filterByLayerName(list(layers.values()),
                                                                 ['GPS', 'T1', 'T2', 'Gain', 'Yield'],
                                                                 inverse=True)
            boundaryLayer = self.layerService.filterByLayerName(list(layers.values()), ['contour'])
            treatmentLayer = self.layerService.filterByLayerName(list(layers.values()), ['treatment'])
            samplingLayer = self.layerService.filterByLayerName(list(layers.values()), ['filtermap', 'Yield_Map', 'T1_T2_total'])

            self.harvesterLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.harvesterLayerComboBox.setExceptedLayerList(harvesterLayer)

            self.treatmentLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.treatmentLayerComboBox.setExceptedLayerList(treatmentLayer)

            self.boundaryLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.boundaryLayerComboBox.setExceptedLayerList(boundaryLayer)

            self.samplingLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            if len(samplingLayer) == 0:
                self.samplingLayerComboBox.setEnabled(False)
            else:
                self.samplingLayerComboBox.setExceptedLayerList(samplingLayer)

            self.targetProjection.insertItems(0, FILTERING_TARGET_PROJECTION)
            self.colonneDateComboBox.insertItems(0, FILTERING_COLONNE_DATE)

            self.setLayerFields()

    def setLayerFields(self):
        self.harvesterLayerYeldComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.harvesterLayerYeldComboBox.setLayer(self.harvesterLayerComboBox.currentLayer())
        samplingFields = self.layerService.filterByFieldName(self.harvesterLayerComboBox.currentLayer(),
                                                             self.kriging[0])

        self.harvesterLayerYeldComboBox.setFields(samplingFields)

        self.harvesterDatageComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.treatmentLayerIdComboBox.setFilters(QgsFieldProxyModel.Numeric)

        self.harvesterDatageComboBox.setLayer(self.harvesterLayerComboBox.currentLayer())
        self.treatmentLayerIdComboBox.setLayer(self.treatmentLayerComboBox.currentLayer())

    def updateFilteringGui(self):

        if self.harvesterLayerComboBox.currentLayer().crs().isGeographic():
            self.crsWarningLabel.show()
            self.crsOperations = self.layerService.getSuggestedCrs(self.harvesterLayerComboBox.currentLayer())
            self.suggestedCrsSelectionWidget.setEnabled(True)
            self.suggestedCrsSelectionWidget.setCrs(QgsCoordinateReferenceSystem(self.crsOperations[2]))
        else:
            self.crsWarningLabel.hide()
            self.suggestedCrsSelectionWidget.setCrs(self.harvesterLayerComboBox.currentLayer().crs())

        self.crsLabel.setText(f'CRS -> {self.harvesterLayerComboBox.currentLayer().crs().authid()}')
        self.setLayerFields()

    def updateSamplingGui(self):
        self.yieldFieldComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.yieldFieldComboBox.setLayer(self.samplingLayerComboBox.currentLayer())
        samplingFields = self.layerService.filterByFieldName(self.samplingLayerComboBox.currentLayer(),
                                                             self.kriging[0])

        self.yieldFieldComboBox.setFields(samplingFields)

        if self.samplingLayerComboBox.count() > 0:
            if self.samplingLayerComboBox.currentLayer().crs().isGeographic():
                self.samplingCrsLabel.show()
                self.samplingWarningLabel.show()
                self.samplingCrsLabel.setText(f'CRS -> {self.samplingLayerComboBox.currentLayer().crs().authid()}')
                self.samplerPushButton.setEnabled(False)
                self.yieldFieldComboBox.setEnabled(False)
            else:
                self.samplingWarningLabel.hide()
                self.samplingCrsLabel.hide()
                self.samplerPushButton.setEnabled(True)
                self.yieldFieldComboBox.setEnabled(True)
        else:
            self.samplingLayerComboBox.setEnabled(False)

    def getYieldFilteringParameters(self):
        return {
            'Contour': self.boundaryLayerComboBox.currentLayer(),
            'Polygones_traitement': self.treatmentLayerComboBox.currentLayer(),
            'Identifiant_polygones': self.treatmentLayerIdComboBox.currentField(),
            'Carte_rendement': self.harvesterLayerComboBox.currentLayer(),
            'Datage': self.harvesterDatageComboBox.currentField(),
            'Rendement': self.harvesterLayerYeldComboBox.currentField(),
            'Target_Projection': self.targetProjection.currentIndex(),
            'Polygones_pairs': self.settings[0][1],
            'Polygones_impairs': self.settings[0][0],
            'Colonne_date': self.colonneDateComboBox.currentIndex(),
            'Largeur_coupe': self.settings[1],
            'Sous_Echantillonnage': self.settings[2],
            'RPLOTS': f"{self.filePath}/00_Data/00_Raw_Files/rPlots.html",
            'Carte_filtree': '',
            'Table_errors': f"{self.filePath}/00_Data/00_Raw_Files/table_errors.csv"
        }

    def getFilterTaskParameters(self):
        return {
            'filteredMapLayerPath': f"{self.filePath}/00_Data/00_Raw_Files/Yield_Map.shp",
            'filterParameters': self.getYieldFilteringParameters(),
            'reprojectionParameters': self.getReprojectionParameters()
        }

    def getReprojectionParameters(self):
        reprojectedLayerName = 'T1_T2_total'
        return {
            'reproject': self.reprojectCheckBox.isChecked(),
            'layerName': reprojectedLayerName,
            'epsg': self.suggestedCrsSelectionWidget.crs().authid(),
            'operations': self.crsOperations[3],
            'outputReprojectLayer': f"{self.filePath}/00_Data/01_Reproject/{reprojectedLayerName}.shp"
        }

    def runFilter(self):

        self.task = FilterTask(self.getFilterTaskParameters(), self.project,
                               self.harvesterLayerYeldComboBox.currentField())

        QgsApplication.taskManager().addTask(self.task)
        self.close()

    def runSampling(self):
        self.samplingTask = SamplingTask(self.samplingLayerComboBox,
                                         self.yieldFieldComboBox.currentField(), self.project)

        QgsApplication.taskManager().addTask(self.samplingTask)
        self.close()
