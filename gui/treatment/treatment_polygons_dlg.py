# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentPolygons
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from typing import Optional

from qgis.PyQt import QtWidgets
from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel, QgsProject, QgsCoordinateReferenceSystem, QgsTask, \
    QgsApplication

from .treatment_polygons_dlg_base import Ui_TreatmentPolygonsDialogBase
from ..settings.options_settings_dlg import OptionsSettingsPage
from ...core.constants import POLYGONS_BUILDER_METHODS
from ...core.services.layer_service import LayerService
from ...core.services.system_service import SystemService
from ...core.services.widget_service import WidgetService
from ...core.tasks.treatment_task import TreatmentTask


class TreatmentPolygons(QtWidgets.QDialog, Ui_TreatmentPolygonsDialogBase):

    def __init__(self, project, parent=None):
        """Constructor."""
        super(TreatmentPolygons, self).__init__(parent)
        self.setupUi(self)
        self.project = project
        self.setWindowTitle('Treatment polygons')
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.settings = OptionsSettingsPage().getTreatmentPolygonsSettings()

        self.treatmentTask: Optional[QgsTask] = None
        self.crsOperations = self.layerService.getSuggestedCrs(self.gpsPointLayerComboBox.currentLayer())
        self.methodComboBox.insertItems(0, POLYGONS_BUILDER_METHODS)
        self.enableWidget(False)
        self.suggestedCrsSelectionWidget.setEnabled(False)
        self.setMapLayerCombobox()
        self.updateGui()
        self.treatmentCheckBox.stateChanged.connect(self.enableWidget)
        self.gpsPointLayerComboBox.layerChanged.connect(self.updateGui)
        self.createPolygonsPushButton.clicked.connect(self.createPolygons)

    def setMapLayerCombobox(self):
        layers = QgsProject.instance().mapLayers()
        if len(layers) == 0:
            self.gpsPointLayerComboBox.setEnabled(False)
        else:
            treatmentLayer = self.layerService.filterByLayerName(list(layers.values()), ['T1', 'T2', 'Gain', 'Yield'],
                                                                 inverse=True)
            self.gpsPointLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.gpsPointLayerComboBox.setExceptedLayerList(treatmentLayer)
            borderSize = float(self.settings[3]) if self.settings[3] is not None else 10.0
            self.borderSizeSpinBox.setValue(borderSize)
        self.setLayerFields()

    def setLayerFields(self):
        layer = self.gpsPointLayerComboBox.currentLayer()
        self.sortingFieldComboBox.setFilters(QgsFieldProxyModel.Numeric)
        self.sortingFieldComboBox.setLayer(layer)

    def updateGui(self):

        if self.gpsPointLayerComboBox.currentLayer().crs().isGeographic():
            self.crsWarningLabel.show()
            self.crsOperations = self.layerService.getSuggestedCrs(self.gpsPointLayerComboBox.currentLayer())
            self.suggestedCrsSelectionWidget.setEnabled(True)
            self.suggestedCrsSelectionWidget.setCrs(QgsCoordinateReferenceSystem(self.crsOperations[2]))

        else:

            self.crsWarningLabel.hide()
            self.suggestedCrsSelectionWidget.setCrs(self.gpsPointLayerComboBox.currentLayer().crs())
            borderSize = float(self.settings[3]) if self.settings[3] is not None else 10.0
            self.borderSizeSpinBox.setValue(borderSize)

        self.crsLabel.setText(f'CRS -> {self.gpsPointLayerComboBox.currentLayer().crs().authid()}')
        self.setLayerFields()

    def enableWidget(self, state):
        widgets = [self.methodComboBox, self.sortingFieldComboBox, self.borderSizeSpinBox, self.boundaryCheckBox]
        for widget in widgets:
            WidgetService.enableWidget(widget, state)

    def getTaskParameters(self):
        return {
            'layer': self.gpsPointLayerComboBox.currentLayer(),
            'polygonBuilder': self.getWaypointsPolygonsBuilderParameters(),
            'boundary': self.boundaryCheckBox.isChecked(),
            'reprojection': self.getReprojectionParameters()
        }

    def getWaypointsPolygonsBuilderParameters(self):
        layerName = self.gpsPointLayerComboBox.currentLayer().name()
        self.filePath = self.project.homePath()
        return {
            'Waypoints': self.gpsPointLayerComboBox.currentLayer(),
            'Initial_Projection': 0,
            'Reprojection': 0,
            'Methode': self.methodComboBox.currentIndex(),
            'Variable_ordonnee': self.sortingFieldComboBox.currentField(),
            'Size_border': self.borderSizeSpinBox.value(),
            'Polygones_traitement': f"{self.filePath}/00_Data/00_Raw_Files/{f'{layerName}'}_treatment.shp"
        }

    def getReprojectionParameters(self):
        return {
            'reproject': self.reprojectCheckBox.isChecked(),
            'epsg': self.suggestedCrsSelectionWidget.crs().authid(),
            'operations': self.crsOperations
        }

    def createPolygons(self):

        self.treatmentTask = TreatmentTask(self.getTaskParameters(), self.project)

        QgsApplication.taskManager().addTask(self.treatmentTask)
        self.close()
