# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentPolygons
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt import QtWidgets
from qgis.core import QgsFieldProxyModel, QgsProject

from ...core.services.message_service import UserFeedback
from ...core.constants import POLYGONS_BUILDER_METHODS, QGIS_TOC_GROUPS
from .treatment_polygons_dlg_base import Ui_TreatmentPolygonsDialogBase
from ...core.services.layer_service import LayerService
from ...core.services.system_service import SystemService
from ...core.services.widget_service import WidgetService
from ...core.tools.algorithm_runner import AlgorithmRunner


class TreatmentPolygons(QtWidgets.QDialog, Ui_TreatmentPolygonsDialogBase):

    def __init__(self, project, parent=None):
        """Constructor."""
        super(TreatmentPolygons, self).__init__(parent)
        self.setupUi(self)
        self.project = project
        self.setWindowTitle('Treatment polygons')
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.borderSizeSpinBox.setValue(10)
        self.methodComboBox.insertItems(0, POLYGONS_BUILDER_METHODS)
        self.enableWidget(False)
        self.treatmentCheckBox.stateChanged.connect(self.enableWidget)
        self.gpsPointLayerComboBox.layerChanged.connect(self.setLayerFields)
        self.setMapLayerCombobox()
        self.createPolygonsPushButton.clicked.connect(self.createPolygons)

    def setMapLayerCombobox(self):
        layers = QgsProject.instance().mapLayers()
        if len(layers) == 0:
            self.gpsPointLayerComboBox.setEnabled(False)
        else:
            self.gpsPointLayerComboBox.setLayer(list(layers.values())[0])

    def setLayerFields(self):
        layer = self.gpsPointLayerComboBox.currentLayer()
        self.sortingFieldComboBox.setFilters(QgsFieldProxyModel.Int | QgsFieldProxyModel.LongLong)
        self.sortingFieldComboBox.setLayer(layer)

    def enableWidget(self, state):
        widgets = [self.methodComboBox, self.sortingFieldComboBox, self.borderSizeSpinBox, self.boundaryCheckBox]
        for widget in widgets:
            WidgetService.enableWidget(widget, state)

    def createPolygons(self):
        filePath = self.project.homePath()
        treatmentLayer = f"{filePath}/00_Data/01_Reproject/{f'{self.gpsPointLayerComboBox.currentLayer().name()}'}_treatment.shp"
        feedback = UserFeedback()
        treatmentPolygons = AlgorithmRunner.runWaypointsPolygonsBuilder(self.gpsPointLayerComboBox.currentLayer(),
                                                                        self.methodComboBox.currentIndex(),
                                                                        self.sortingFieldComboBox.currentField(),
                                                                        self.borderSizeSpinBox.value(),
                                                                        feedback=feedback,
                                                                        outputLayer=treatmentLayer)
        feedback.close()
        self.layerService.loadShapeFile(QGIS_TOC_GROUPS[0], treatmentLayer)

        if self.boundaryCheckBox.isChecked():
            boundaryLayer = f"{filePath}/00_Data/01_Reproject/{f'{self.gpsPointLayerComboBox.currentLayer().name()}'}_contour.shp"
            feedback = UserFeedback()
            AlgorithmRunner.runDissolvePolygons(treatmentPolygons, feedback=feedback, outputLayer=boundaryLayer)
            feedback.close()
            self.layerService.loadShapeFile(QGIS_TOC_GROUPS[0], boundaryLayer)
