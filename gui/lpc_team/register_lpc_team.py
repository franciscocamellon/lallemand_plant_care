# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RegisterLpcTeam
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import datetime
import os

from qgis.PyQt import QtWidgets, QtCore, QtGui, uic
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QHeaderView

from ...core.services.message_service import MessageService
from ...core.factories.postgres_factory import PostgresFactory

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), 'team_manager.ui')
)


class RegisterLpcTeam(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self):
        """Constructor."""
        super(RegisterLpcTeam, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("LPC Team Management")
        self.tableWidget.setHorizontalHeaderLabels(['Id', "First name", "Last name", "Create date"])
        self.tableWidget.setColumnHidden(0, True)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.lpcTeamIDLabel.hide()
        self.lpcTeamAddPushButton.clicked.connect(self.register)
        self.deletePushButton.clicked.connect(self.deleteTeamMember)
        self.editPushButton.clicked.connect(self.updateUI)
        self.loadData()

    def register(self):
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        firstName = self.lpcTeamFirstNameLineEdit.text()
        lastName = self.lpcTeamLastNameLineEdit.text()
        dateTime = datetime.datetime.now()
        buttonType = self.lpcTeamAddPushButton.text()

        if buttonType == 'Update':
            memberId = self.lpcTeamIDLabel.text()
            sql = "UPDATE geostatistics.lpc_team SET first_name = %s, last_name = %s, update_date = %s WHERE id = %s;"
            data = (firstName, lastName, dateTime.strftime('%Y-%m-%d %H:%M:%S'), memberId)
            self.lpcTeamAddPushButton.setText('Add')
            self.addGroupBox.setTitle('Add professional')
        else:
            sql = "INSERT INTO geostatistics.lpc_team (first_name, last_name, create_date) VALUES (%s, %s, %s);"
            data = (firstName, lastName, dateTime.strftime('%Y-%m-%d %H:%M:%S'))

        result = PostgresFactory().postSqlExecutor(connection, sql, data)

        print(result)
        self.loadData()
        self.lpcTeamLastNameLineEdit.clear()
        self.lpcTeamFirstNameLineEdit.clear()
        if isinstance(result, bool):
            MessageService().messageBox('LPC Team Management', 'Data deleted successfully!', 3, 1)
        else:
            MessageService().messageBox('LPC Team Management', result, 5, 1)

    def loadData(self):
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, 'SELECT * FROM geostatistics.lpc_team')

        tableRow = 0
        self.tableWidget.setRowCount(len(result))

        for row in result:
            # Assuming row[3] and row[4] are date or datetime objects
            date_col3 = row[3].strftime("%d/%m/%Y") if row[3] is not None else ""
            date_col4 = row[4].strftime("%d/%m/%Y") if row[4] is not None else ""

            # Create QTableWidgetItems and set data using setData method
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(Qt.DisplayRole, row[0])

            item1 = QtWidgets.QTableWidgetItem()
            item1.setData(Qt.DisplayRole, row[1])

            item2 = QtWidgets.QTableWidgetItem()
            item2.setData(Qt.DisplayRole, row[2])

            item3 = QtWidgets.QTableWidgetItem()
            item3.setData(Qt.DisplayRole, date_col3)

            item4 = QtWidgets.QTableWidgetItem()
            item4.setData(Qt.DisplayRole, date_col4)

            # Set the items in the tableWidget
            self.tableWidget.setItem(tableRow, 0, item0)
            self.tableWidget.setItem(tableRow, 1, item1)
            self.tableWidget.setItem(tableRow, 2, item2)
            self.tableWidget.setItem(tableRow, 3, item3)
            self.tableWidget.setItem(tableRow, 4, item4)
            tableRow += 1

    def deleteTeamMember(self):
        currentRow, data = self.getSelectedData()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')

        sql = f"DELETE FROM geostatistics.lpc_team WHERE id = '{data[0]}';"
        result = PostgresFactory().postSqlExecutor(connection, sql)

        self.loadData()
        if isinstance(result, bool):
            MessageService().messageBox('LPC Team Management', 'Data deleted successfully!', 3, 1)
        else:
            MessageService().messageBox('LPC Team Management', result[1], 5, 1)
        print(result)

    def updateUI(self):
        currentRow, data = self.getSelectedData()
        self.lpcTeamFirstNameLineEdit.setText(data[1])
        self.lpcTeamLastNameLineEdit.setText(data[2])
        self.lpcTeamAddPushButton.setText('Update')
        self.addGroupBox.setTitle('Update professional')
        self.lpcTeamIDLabel.setText(data[0])

    def getSelectedData(self):
        currentRow = self.tableWidget.currentRow()
        selectedItems = self.tableWidget.selectedItems()

        if not selectedItems:
            print("No row selected.")
            return

        totalColumns = 5

        if len(selectedItems) > 0:
            data = []
            for column in range(totalColumns):

                item = self.tableWidget.item(currentRow, column)
                data.append(item.text())

            return currentRow, data
        else:
            print("Unexpected number of selected items.")

    def handleButtonClick(self, result):
        if result:
            self.accept()
