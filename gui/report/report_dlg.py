# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentPolygons
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math
from typing import Optional

from qgis.utils import plugins
from qgis.PyQt import QtWidgets
from qgis.PyQt.Qt import QVariant
from qgis.core import QgsFieldProxyModel, QgsMapLayerProxyModel, QgsTask, QgsProcessingContext

from ...core.services.statistics_service import StatisticsService
from ...core.constants import VALIDATION_FIELDS, QGIS_TOC_GROUPS
from ...core.services.system_service import SystemService
from ...core.tools.algorithm_runner import AlgorithmRunner
from ...core.services.message_service import MessageService, UserFeedback
from .report_dlg_base import Ui_Dialog
from ..settings.options_settings_dlg import OptionsSettingsPage
from ...core.services.layer_service import LayerService
from ...core.services.widget_service import WidgetService


class StatisticsReport(QtWidgets.QDialog, Ui_Dialog):

    def __init__(self, iface, project, parent=None):
        """Constructor."""
        super(StatisticsReport, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.project = project
        self.filePath = self.project.homePath()
        self.setWindowTitle('Statistics reports')
        self.layerService = LayerService()
        self.settings = OptionsSettingsPage().getKrigingSettings()
        self.layers = self.project.instance().mapLayers()
        self.setReportUI()
        self.reportPushButton.clicked.connect(self.runReport)

    def setReportUI(self):
        t1Surface = self.layerService.filterByLayerName(list(self.layers.values()), ['T1_Final_Surface_Points'])
        t2Surface = self.layerService.filterByLayerName(list(self.layers.values()), ['T2_Final_Surface_Points'])
        gainSurface = self.layerService.filterByLayerName(list(self.layers.values()), ['Yield_Gain_Points'])

        self.gainSurfacePointsComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.t1SurfacePointsComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.t2SurfacePointsComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)

        self.gainSurfacePointsComboBox.setExceptedLayerList(gainSurface)
        self.t1SurfacePointsComboBox.setExceptedLayerList(t1Surface)
        self.t2SurfacePointsComboBox.setExceptedLayerList(t2Surface)

    def runReport(self):
        StatisticsService().replacePlaceholder(self.gainSurfacePointsComboBox.currentLayer(), self.filePath)
