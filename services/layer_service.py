# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerService
                                 A QGIS plugin
 Lallemand - Crop Analysis Environment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ETG
        email                : etg@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.core import QgsProject, QgsVectorLayer, QgsLayerTreeGroup, QgsLayerTreeLayer


class LayerService:

    def __init__(self, iface):
        self.iface = iface

    def load_shape_file(self, project, group_name, file_path):

        layer = self.create_vector_layer(self.get_file_name(file_path), file_path)
        QgsProject.instance().addMapLayer(layer, False)

        if not layer:
            print("Layer failed to load!")

        root = self.create_layer_tree_group(project, group_name)
        group = root.findGroup(group_name)
        group.addLayer(layer)

    @staticmethod
    def create_vector_layer(layer_name, file_path, crs=None):
        layer = QgsVectorLayer(file_path, layer_name, "ogr")

        if not layer.isValid():
            print("Layer failed to load!")

        if crs is not None:
            layer.setCrs(crs)
        return layer

    @staticmethod
    def create_layer_tree_group(qgs_project, group_name):
        root = qgs_project.instance().layerTreeRoot()
        group = QgsLayerTreeGroup(group_name)
        root.addChildNode(group)
        return root

    @staticmethod
    def get_file_name(file_path):
        return os.path.splitext(os.path.basename(file_path))[0]


