# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReportService
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ETG
        email                : etg@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import re

from docx import Document
from docx.shared import Inches
from pptx import Presentation

from .layer_service import LayerService
from .message_service import MessageService


class ReportService:

    def __init__(self):
        self.layerService = LayerService()
        self.messageService = MessageService()

    @staticmethod
    def paragraphReplaceText(paragraph, regex, replace_str):
        """Return `paragraph` after replacing all matches for `regex` with `replace_str`.

        `regex` is a compiled regular expression prepared with `re.compile(pattern)`
        according to the Python library documentation for the `re` module.
        """
        # --- a paragraph may contain more than one match, loop until all are replaced ---
        while True:
            text = paragraph.text
            match = regex.search(text)
            if not match:
                break

            # --- when there's a match, we need to modify run.text for each run that
            # --- contains any part of the match-string.
            runs = iter(paragraph.runs)
            start, end = match.start(), match.end()

            # --- Skip over any leading runs that do not contain the match ---
            for run in runs:
                run_len = len(run.text)
                if start < run_len:
                    break
                start, end = start - run_len, end - run_len

            # --- Match starts somewhere in the current run. Replace match-str prefix
            # --- occurring in this run with entire replacement str.
            run_text = run.text
            run_len = len(run_text)
            run.text = "%s%s%s" % (run_text[:start], replace_str, run_text[end:])
            end -= run_len  # --- note this is run-len before replacement ---

            # --- Remove any suffix of match word that occurs in following runs. Note that
            # --- such a suffix will always begin at the first character of the run. Also
            # --- note a suffix can span one or more entire following runs.
            for run in runs:  # --- next and remaining runs, uses same iterator ---
                if end <= 0:
                    break
                run_text = run.text
                run_len = len(run_text)
                run.text = run_text[end:]
                end -= run_len

        return paragraph

    def addImageInParagraph(self, document, imageData, feedback):
        totalData = len(imageData)
        progressPerFeature = 100.0 / totalData if totalData else 0

        for placeholder, value in imageData.items():
            if feedback.isCanceled():
                self.messageService.criticalMessageBar('Exporting maps', 'operation aborted by the user!')
                break
            regex = re.compile(placeholder)
            for index, paragraph in enumerate(document.paragraphs):
                if placeholder in paragraph.text:
                    run = paragraph.add_run()
                    run.add_picture(value[0], width=Inches(value[1]))
                    self.paragraphReplaceText(paragraph, regex, '')
                    feedback.setProgress(int(index * progressPerFeature))
        feedback.setProgress(100)

    def addImageInTable(self, document, imageData, feedback):
        totalData = len(imageData)
        progressPerFeature = 100.0 / totalData if totalData else 0

        for placeholder, value in imageData.items():
            if feedback.isCanceled():
                self.messageService.criticalMessageBar('Exporting maps', 'operation aborted by the user!')
                break
            regex = re.compile(placeholder)
            for index, table in enumerate(document.tables):
                for row in table.rows:
                    for cell in row.cells:
                        for cellIndex, paragraph in enumerate(cell.paragraphs):
                            if placeholder in paragraph.text:
                                run = paragraph.add_run()
                                run.add_picture(value[0], width=Inches(value[1]))
                                self.paragraphReplaceText(paragraph, regex, '')
                                feedback.setProgress(int(index * progressPerFeature))
        feedback.setProgress(100)

    def fillPlaceholdersOnParagraphs(self, document, trialData, feedback):
        totalData = len(trialData)
        progressPerFeature = 100.0 / totalData if totalData else 0

        for field, value in trialData.items():
            if feedback.isCanceled():
                self.messageService.criticalMessageBar('Exporting maps', 'operation aborted by the user!')
                break
            regex = re.compile(field)
            for index, paragraph in enumerate(document.paragraphs):
                self.paragraphReplaceText(paragraph, regex, value)
                feedback.setProgress(int(index * progressPerFeature))

        feedback.setProgress(100)

    def fillPlaceholdersOnTable(self, document, tableData, feedback):
        totalData = len(tableData)
        progressPerFeature = 100.0 / totalData if totalData else 0

        for cellField, value in tableData.items():
            if feedback.isCanceled():
                self.messageService.criticalMessageBar('Exporting maps', 'operation aborted by the user!')
                break
            cellRegex = re.compile(cellField)
            for index, table in enumerate(document.tables):
                for row in table.rows:
                    for cell in row.cells:
                        for cellIndex, paragraph in enumerate(cell.paragraphs):
                            self.paragraphReplaceText(paragraph, cellRegex, value)
                            feedback.setProgress(int(cellIndex * progressPerFeature))
        feedback.setProgress(100)

    def createWordReport(self, paragraphData, tableData, imageData, filePath, feedback):
        doc = os.path.join(self.layerService.getReportPath(), 'report_template.docx')
        reportDocument = Document(doc)

        self.fillPlaceholdersOnParagraphs(reportDocument, paragraphData, feedback)
        self.fillPlaceholdersOnTable(reportDocument, tableData, feedback)
        self.addImageInParagraph(reportDocument, imageData, feedback)
        self.addImageInTable(reportDocument, imageData, feedback)

        output = os.path.join(filePath, '05_Results', 'output_report.docx')
        reportDocument.save(output)

    def createPresentation(self, presentationData, filePath):
        doc = os.path.join(self.layerService.getPresentationPath(), 'presentation_template.pptx')
        reportPresentation = Presentation(doc)
        for slideIndex, slide in enumerate(reportPresentation.slides, start=1):

            for dataIndex, data in presentationData.items():
                if slideIndex == dataIndex:
                    for placeholderIndex, placeholderData in data.items():
                        if placeholderIndex == 1:
                            continue
                        placeholder = slide.placeholders[placeholderIndex]
                        if placeholderData is None:
                            continue
                        picture = placeholder.insert_picture(placeholderData)
        output = os.path.join(filePath, '05_Results', 'output_presentation.pptx')
        reportPresentation.save(output)
