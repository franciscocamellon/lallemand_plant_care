# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WidgetService
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ETG
        email                : etg@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

import matplotlib.pyplot as plt
import numpy as np

from qgis.PyQt.QtGui import QPalette, QColor

from ...gui.settings.options_settings_dlg import OptionsSettingsPage


class PlotterService:

    def __init__(self):
        self.settings = OptionsSettingsPage().getHistogramSettings()
        self.color = self.settings[1].getRgbF()
        self.edgeColor = self.settings[2].getRgbF()
        self.rowLabels = ['N of samples', 'Minimum', 'Maximum', 'Sum', 'Mean', 'Standard deviation',
                          'Coef variation (%)']
        self.rowTableLabels = [['N of samples'], ['Minimum'], ['Maximum'], ['Sum'], ['Mean'], ['Standard deviation'],
                               ['Coef variation (%)']]

    def createVFrequencyHistogram(self, values, tableData, title, exportPng=False, path=None):
        bins = int(self.settings[0])
        fontSize = 12
        cellText = np.hstack([self.rowTableLabels, tableData])
        fig = plt.figure(figsize=(4.2, 5))

        hist = fig.add_subplot(2, 1, 1)
        hist.hist(values, bins=bins, color=self.color, edgecolor=self.edgeColor)
        hist.set_title(f'{title} Histogram', fontsize=fontSize)
        hist.set_xlabel('Values', fontsize=fontSize)
        hist.set_ylabel('Frequency', fontsize=fontSize)

        ax2 = fig.add_subplot(2, 1, 2)
        bbox = [0, 0, 1, 0.6]
        ax2.axis('off')
        ax2.text(0.5, 0.605, 'Statistics', fontsize=12, ha='center', va='bottom')
        stats_table = ax2.table(cellText=cellText,
                                colWidths=[0.5, 0.6],
                                cellLoc='right', rowLoc='center',
                                bbox=bbox
                                )
        stats_table.auto_set_font_size(False)
        stats_table.set_fontsize(10)
        fig.tight_layout()

        outputPath = os.path.join(path, f'{title}_V.png')
        if exportPng:
            plt.savefig(outputPath, dpi=300, bbox_inches='tight')
        plt.close()

    def createFrequencyHistogram(self, values, tableData, title, exportPng=False, path=None):
        bins = int(self.settings[0])
        fontSize = 12
        cellText = np.hstack([self.rowTableLabels, tableData])
        fig = plt.figure(figsize=(6.5, 2.7))

        hist = fig.add_subplot(1, 2, 1)
        hist.hist(values, bins=bins, color=self.color, edgecolor=self.edgeColor)
        hist.set_title(f'{title} Histogram', fontsize=fontSize)
        hist.set_xlabel('Values', fontsize=fontSize)
        hist.set_ylabel('Frequency', fontsize=fontSize)

        ax2 = fig.add_subplot(1, 2, 2)
        bbox = [0, 0, 1, 0.6]
        ax2.axis('off')
        ax2.text(0.5, 0.605, 'Statistics', fontsize=12, ha='center', va='bottom')
        stats_table = ax2.table(cellText=cellText,
                                colWidths=[0.6, 0.5],
                                cellLoc='right', rowLoc='center',
                                bbox=bbox
                                )
        stats_table.auto_set_font_size(False)
        stats_table.set_fontsize(9)
        fig.tight_layout()

        outputPath = os.path.join(path, f'{title}_H.png')
        if exportPng:
            plt.savefig(outputPath, dpi=300, bbox_inches='tight')
        plt.close()

    def createStatisticsTable(self, tableData, title, exportPng=False, path=None):
        plt.figure()

        cellText = np.hstack([self.rowTableLabels, tableData])
        fig, ax = plt.subplots()

        statsTable = ax.table(cellText=cellText,
                              cellLoc='center', rowLoc='center',
                              loc='center', colWidths=[0.3, 0.3])
        plt.text(0.5, 0.67, f'{title} Statistics', fontsize=12, ha='center', va='bottom', transform=ax.transAxes)
        ax = plt.gca()
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        plt.box(on=None)

        fig.tight_layout()
        outputPath = os.path.join(path, f'{title}_table.png')

        if exportPng:
            plt.savefig(outputPath, transparent=True, dpi=300, bbox_inches='tight')
        plt.close()

    @staticmethod
    def createGainStatisticsTable(pValue, statsData, anovaData, exportPng=False, path=None):
        fig = plt.figure(figsize=(5, 2.7))

        ax1 = fig.add_subplot(1, 2, 1)
        bbox = [0, 0, 0.8, 0.8]
        ax1.axis('off')
        ax1.text(-0.2, 0.82, 'Statistics', fontsize=12, ha='center', va='bottom')
        statsTable = ax1.table(cellText=statsData,
                               rowLabels=('Sum', 'Mean', 'Mode', 'Median', 'Standard Deviation'),
                               colWidths=[1, 0.6],
                               cellLoc='right', rowLoc='left',
                               bbox=bbox
                               )
        statsTable.auto_set_font_size(False)
        statsTable.set_fontsize(10)

        ax2 = fig.add_subplot(1, 2, 2)
        bbox = [0, 0, 1, 0.5]
        ax2.axis('off')
        ax2.text(0.25, 0.63, 'ANOVA Test', fontsize=12, ha='center', va='bottom')
        ax2.text(0.5, 0.515, f'P-Value = {pValue}', fontsize=10, ha='center', va='bottom')

        anovaTable = ax2.table(cellText=anovaData,
                               rowLabels=['Mean', 'Std. Dev.'],
                               colLabels=['T1', 'T2'],
                               colWidths=[0.5, 0.5],
                               cellLoc='center', rowLoc='center',
                               bbox=bbox
                               )
        anovaTable.auto_set_font_size(False)
        anovaTable.set_fontsize(10)

        fig.tight_layout()
        outputPath = os.path.join(path, f'Gain_Statistics_Table.png')

        if exportPng:
            plt.savefig(outputPath, dpi=300, bbox_inches='tight')
        plt.close()

    @staticmethod
    def yieldFrequencyHistogram(values, labels, exportPng=False, path=None):
        colors = ['#bfbcbc', '#ffff00', '#55ff00', '#267300']
        plt.figure()
        plt.hist(values, bins=12, histtype='bar', color=colors, edgecolor='black', label=labels, rwidth=1)
        plt.xlabel('Yield (kg)')
        plt.ylabel('Frequency')
        plt.title('Yield Gain Histogram')
        plt.legend(title="")

        if exportPng:
            plt.savefig(path)
        plt.close()
