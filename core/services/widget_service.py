# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WidgetService
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ETG
        email                : etg@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import datetime

from qgis.PyQt import QtCore, QtWidgets
from qgis.PyQt.QtWidgets import QHeaderView, QWidget, QLabel, QPushButton, QCheckBox, QLineEdit, QSpinBox, QComboBox
from qgis.PyQt.QtGui import QPalette, QColor, QDoubleValidator
from qgis.PyQt.QtCore import Qt
from qgis.gui import QgsFileWidget

from .message_service import MessageService


class WidgetService:

    def __init__(self):
        """
        Constructor for the SystemService class.
        """
        pass

    @staticmethod
    def getSelectedData(tableWidget, totalColumns, msgTitle):
        currentRow = tableWidget.currentRow()
        selectedItems = tableWidget.selectedItems()

        if not selectedItems:
            return

        if len(selectedItems) > 0:
            data = []
            for column in range(totalColumns):
                item = tableWidget.item(currentRow, column)
                data.append(item.text())

            return currentRow, data
        else:
            MessageService().messageBox(msgTitle, 'No data selected.', 5, 1)

    @staticmethod
    def populateTable(result, tableWidget):
        tableWidget.clearContents()

        if not result:
            tableWidget.setRowCount(1)
            return

        tableWidget.setRowCount(len(result))
        keys = result[0].keys()
        tableWidget.setColumnCount(len(keys))

        for rowIdx, row in enumerate(result):
            for colIdx, key in enumerate(keys):
                value = row[key]
                if isinstance(value, datetime.datetime):
                    value = value.strftime("%d/%m/%Y") if value else ""

                item = QtWidgets.QTableWidgetItem(str(value))
                tableWidget.setItem(rowIdx, colIdx, item)

    @staticmethod
    def enableWidget(widget, state):
        if state == 0:
            widget.setEnabled(False)
        else:
            widget.setEnabled(True)

    @staticmethod
    def clearWidget(widget):

        if isinstance(widget, QLabel):
            if widget.text() == '<html><head/><body><p><span style=" font-size:8pt; color:#ff0000;">**Needs to be reprojected</span></p></body></html>':
                widget.hide()
            elif widget.text().split()[0] == 'CRS':
                widget.setText('CRS -> ')
            else:
                pass

        elif isinstance(widget, QLineEdit):
            widget.clear()

        elif isinstance(widget, QCheckBox):
            widget.setChecked(False)

        elif isinstance(widget, QSpinBox):
            widget.setValue(0)

        elif isinstance(widget, QSpinBox):
            widget.setValue(0)

        elif isinstance(widget, QComboBox):
            widget.setCurrentIndex(0)

        elif isinstance(widget, QgsFileWidget):
            widget.lineEdit().clearValue()

        else:
            print(f"Unsupported widget type: {type(widget).__name__}")

    def validateNumericEntry(self, lineEdit, text):
        try:
            positiveNumericValue = float(text)

            if positiveNumericValue < 0:
                self._setTextColor(lineEdit, Qt.red)
            else:
                self._setTextColor(lineEdit, Qt.black)

        except ValueError:
            self._setTextColor(lineEdit, Qt.red)

    def validateEmpty(self, lineEdit):
        if lineEdit.text().strip():
            self._setBackgroundColor(lineEdit, Qt.white)
        else:
            self._setBackgroundColor(lineEdit, Qt.pink)

    @staticmethod
    def floatValidator(widget):
        floatValidator = QDoubleValidator()
        widget.setValidator(floatValidator)

    @staticmethod
    def _setTextColor(lineEdit, color):
        palette = lineEdit.palette()
        palette.setColor(QPalette.Text, QColor(color))
        lineEdit.setPalette(palette)

    @staticmethod
    def _setBackgroundColor(lineEdit, color):
        palette = lineEdit.palette()
        palette.setColor(QPalette.Base, QColor(color))
        lineEdit.setPalette(palette)
