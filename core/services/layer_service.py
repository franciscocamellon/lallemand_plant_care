# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerService
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ETG
        email                : etg@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY, QgsLayerTreeGroup, \
    QgsLayerTreeLayer, QgsCoordinateTransform

from .message_service import MessageService
from .system_service import SystemService


class LayerService:

    def __init__(self, iface, default_crs=None):
        self.default_crs = default_crs
        self.message_service = MessageService()
        self.systemService = SystemService()

    def load_shape_file(self, project, group_name, file_path):

        try:
            fileName = self.systemService.extractFileName(file_path)
            layer = self.create_vector_layer(fileName, file_path)

            if group_name is None:
                project.instance().addMapLayer(layer)
            else:
                project.instance().addMapLayer(layer, False)
                root = self.create_layer_tree_group(project, group_name)
                group = root.findGroup(group_name)
                group.addLayer(layer)
            return layer.crs()
        except Exception as load_file_exception:
            errorMessage = f'Error loading shape file: {str(load_file_exception)}'
            self.message_service.messageBox('Loading file', errorMessage, 5, 1)

    def create_vector_layer(self, layer_name, file_path, use_default_crs=True):

        try:
            if use_default_crs:
                crs = self.default_crs
            else:
                crs = None
            layer = QgsVectorLayer(file_path, layer_name, "ogr")

            if not layer.isValid():
                raise Exception('Layer is not valid.')

            if crs is not None:
                layer.setCrs(crs)
            return layer

        except Exception as create_layer_exception:
            errorMessage = f'Error creating layer {layer_name} -> {str(create_layer_exception)}'
            self.message_service.messageBox('Loading file', errorMessage, 5, 1)
            return None

    def convert_layer_crs(self, layer, target_crs):
        try:
            if not layer.isValid():
                raise Exception('Invalid layer for CRS conversion.')

            if target_crs is None:
                raise Exception('Target CRS is not specified.')

            source_crs = layer.crs()
            transform_context = QgsCoordinateTransform.Context()
            transform = QgsCoordinateTransform(source_crs, target_crs, transform_context)

            for feature in layer.getFeatures():
                geometry = feature.geometry()
                if not geometry.isEmpty():
                    geometry.transform(transform)
                    feature.setGeometry(geometry)
                    layer.updateFeature(feature)

            return True

        except Exception as e:
            errorMessage = f'Error converting layer CRS: {str(e)}'
            self.message_service.messageBox('Loading file', errorMessage, 5, 1)
            return False

    def create_layer_tree_group(self, qgs_project, group_name):

        try:
            root = qgs_project.instance().layerTreeRoot()
            group = QgsLayerTreeGroup(group_name)
            root.addChildNode(group)
            return root

        except Exception as group_exception:
            errorMessage = f'Error creating layer tree group: {str(group_exception)}'
            self.message_service.messageBox('Loading file', errorMessage, 5, 1)
            return None

    @staticmethod
    def addLayerToTreeGroup(project, layer, groupName):
        root = project.instance().layerTreeRoot()
        group = root.findGroup(groupName)
        group.addLayer(layer)

    def getSuggestedCrs(self, layer):

        worldZoneFileDirectory = self._getWorldZonesPath()
        zoneFile = self.create_vector_layer('world_zones', worldZoneFileDirectory)

        if not layer.isValid():
            print('Layer not valid!')
        else:

            layer_extent = layer.extent()
            bounding_box_polygon = QgsGeometry.fromRect(layer_extent)
            centroid = bounding_box_polygon.centroid().asPoint()

            for feature in zoneFile.getFeatures():
                polygon_geometry = feature.geometry()

                if polygon_geometry.contains(centroid):
                    return feature.attributes()
            else:
                print('Centroid is not within any polygon in layer2')

    @staticmethod
    def _getWorldZonesPath():
        currentDirectory = os.path.dirname(__file__)
        parentDirectory = os.path.join(currentDirectory, '..')
        return os.path.join(parentDirectory, 'resources', 'world_zones.geojson')
