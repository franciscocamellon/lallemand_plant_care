# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CropAnalysisEnvironmentDialog
                                 A QGIS plugin
 Lallemand - Crop Analysis Environment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import datetime
from qgis.PyQt import QtCore, QtWidgets

from .register_lpc_team import RegisterLpcTeam
from ..services.layer_service import LayerService
from ..services.system_service import SystemService
from ..services.message_service import MessageService
from ..factories.postgres_factory import PostgresFactory
from ...gui.geostatistics_trial.ui_geostatistics_trial import Ui_GeostatisticsTrialInformation


class GeostatisticsTrial(QtWidgets.QDialog, Ui_GeostatisticsTrialInformation):
    def __init__(self, iface, project):
        """Constructor."""
        super(GeostatisticsTrial, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("Geostatistics Trial Information")
        self.iface = iface
        self.project = project
        self.layer_services = LayerService(self.iface)
        self.originalFarmerFirstName = self.farmerFirstNameLineEdit.text()
        self.originalFarmerLastName = self.farmerLastNameLineEdit.text()
        self.originalCropName = self.cropNameLineEdit.text()
        self.cropSowingDate.setDateTime(QtCore.QDateTime.currentDateTime())
        self.cropHarvestingDate.setDateTime(QtCore.QDateTime.currentDateTime())
        self.fetchDomain()
        self.addLpcTeamPushButton.hide()
        if not self.fetchLpcTeam():
            self.addLpcTeamPushButton.clicked.connect(self.registerLpcTeam)

        self.createTrialBt.clicked.connect(self.createTrialProject)
        self.cancelTrialBt.clicked.connect(self.fetchLpcTeam)
        self.toNextTabPushButton.clicked.connect(self.goToNextTab)
        self.tabWidget.currentChanged.connect(self.setTrialInformation)
        self.trialFieldNameLineEdit.editingFinished.connect(self.setQgisProjectName)

    def saveQgisProject(self):
        self.project.setCrs(self.qgisProjectCrsWidget.crs())
        self.project.write(f'{self.qgisProjectDirectoryFileWidget.filePath()}/{self.qgisProjectLineEdit.text()}.qgs')

        if self.trialDirectoryStructureCheckBox.isChecked():
            SystemService().createDirectoryStructure(self.qgisProjectDirectoryFileWidget.filePath())

    def registerLpcTeam(self):
        """
        Shows the dialog that loads layers from server
        """
        dlg = RegisterLpcTeam()
        dlg.show()
        result = dlg.exec_()
        if result == 1:
            self.fetchLpcTeam()

    def goToNextTab(self):
        self.tabWidget.setCurrentIndex(1)

    def fetchLpcTeam(self):
        self.lpcTeamComboBox.clear()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, 'SELECT * FROM geostatistics.lpc_team')
        if len(result) == 0:
            full_name = ['There are no registered professionals!']
            self.addLpcTeamPushButton.show()
            self.lpcTeamComboBox.addItems(full_name)
            return False
        else:
            full_name = ['Select a professional']
            for row in result:
                full_name.append(f'{row[1]} {row[2]}')

            self.lpcTeamComboBox.addItems(full_name)
            return True

    def fetchDomain(self):
        domains = []
        self.trialIrrigatedComboBox.clear()
        connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
        result = PostgresFactory().getSqlExecutor(connection, 'SELECT * FROM domains.yes_or_not')
        if len(result) == 0:
            domains.append('There are no registered domains!')
            self.trialIrrigatedComboBox.addItems(domains)
            return False
        else:
            for row in result:
                domains.append(f'{row[1]}')
            self.trialIrrigatedComboBox.addItems(domains)
            return True

    def setQgisProjectName(self):
        self.updateLabel(self.qgisProjectLineEdit, self.trialFieldNameLineEdit.text())

    def setTrialInformation(self, index):
        if index == 1:
            newProfessionalLabel = f'Professional:  {self.lpcTeamComboBox.currentText()}'
            self.updateLabel(self.trialProfessionalLabel, newProfessionalLabel)

            fullName = f'{self.farmerFirstNameLineEdit.text()} {self.farmerLastNameLineEdit.text()}'
            newFarmerLabel = f'Farmer: {fullName}'
            self.updateLabel(self.farmerLabel, newFarmerLabel)

            newCropLabel = f'Crop:  {self.cropNameLineEdit.text()}'
            self.updateLabel(self.trialCropLabel, newCropLabel)

    @staticmethod
    def updateLabel(qtLabel, newLabelText):
        qtLabel.clear()
        qtLabel.setText(newLabelText)

    @staticmethod
    def createDate():
        createDate = datetime.datetime.now()
        return createDate.strftime('%Y-%m-%d %H:%M:%S')

    def prepareFarmerData(self):
        table = 'farmer'
        fields = '(first_name, last_name, address, town, country, zipcode, create_date)'
        data = (
            self.farmerFirstNameLineEdit.text(),
            self.farmerLastNameLineEdit.text(),
            f'{self.farmerAddressLineOneLineEdit.text()}, {self.farmerAddressLineTwoLineEdit.text()}',
            self.farmerTown.text(),
            self.farmerCountry.text(),
            self.farmerZipCode.text(),
            self.createDate()
        )
        return [table, fields, data]

    def prepareCropData(self):
        table = 'crop_trial'
        fields = '(crop_name, sowing_date, harvest_date, variety, inter_ro_cm, create_date)'
        data = (
            self.cropNameLineEdit.text(),
            self.cropSowingDate.date().toPyDate().strftime('%Y-%m-%d'),
            self.cropHarvestingDate.date().toPyDate().strftime('%Y-%m-%d'),
            self.cropVarietyLineEdit.text(),
            self.cropInterRoCMSpinBox.value(),
            self.createDate()
        )
        return [table, fields, data]

    def prepareTrialData(self):

        teamName = self.lpcTeamComboBox.currentText().split()
        teamSql = f"SELECT id from geostatistics.lpc_team WHERE lpc_team.first_name = '{teamName[0]}' AND lpc_team.last_name = '{teamName[1]}';"
        farmerSql = f"SELECT id from geostatistics.farmer WHERE farmer.first_name = '{self.farmerFirstNameLineEdit.text()}' AND farmer.last_name = '{self.farmerLastNameLineEdit.text()}';"
        cropSql = f"SELECT id from geostatistics.crop_trial WHERE crop_trial.crop_name = '{self.cropNameLineEdit.text()}';"
        sqlList = [teamSql, farmerSql, cropSql]
        result = []
        for sql in sqlList:
            connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')
            result.append(self.runSql(connection, sql))

        table = 'geostatistic_trial'
        fields = '(lpc_team, farmer, crop_trial, field_name, field_area, field_irrigation, field_soil, create_date)'
        data = (
            result[0][0][0],
            result[1][0][0],
            result[2][0][0],
            self.trialFieldNameLineEdit.text(),
            self.trialFieldAreaLineEdit.text(),
            self.trialIrrigatedComboBox.currentIndex(),
            self.trialSoilTypeLineEdit.text(),
            self.createDate()
        )
        return [table, fields, data]

    @staticmethod
    def runInsertSql(connection, params):
        sql = f"INSERT INTO geostatistics.{params[0]} {params[1]} VALUES {params[2]};"
        return PostgresFactory().postSqlExecutor(connection, sql)

    @staticmethod
    def runSql(connection, sql):
        return PostgresFactory().getSqlExecutor(connection, sql)

    def createTrialProject(self):

        tables = ['farmer', 'crop_trial', 'geostatistic_trial']

        for table in tables:
            connection = PostgresFactory().open_connection_to_db('BD_GEOSTAT_LPC')

            if table == 'farmer':
                result = self.runInsertSql(connection, self.prepareFarmerData())
                msg = 'New farmer successfully created!'
            elif table == 'crop_trial':
                result = self.runInsertSql(connection, self.prepareCropData())
                msg = 'New crop successfully created!'
            else:
                result = self.runInsertSql(connection, self.prepareTrialData())
                msg = 'New trial successfully created!'

            MessageService(self.iface).show_message(msg, 'success')

            if not result:
                MessageService(self.iface).show_message(result, 'error')
                break

        self.saveQgisProject()
