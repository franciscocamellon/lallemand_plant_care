# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ExportLayoutRunner
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-02
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from ..services.composer_service import ComposerService
from ..services.message_service import UserFeedback, MessageService


class ExportLayoutRunner:
    def __init__(self, iface, project):
        self.iface = iface
        self.project = project
        self.feedback = UserFeedback(message='Exporting...', title='Exporting maps')
        self.filePath = self.project.homePath()
        self.composerService = ''
        self.messageService = MessageService(iface=self.iface)

    def run(self):

        layouts = self.project.instance().layoutManager().printLayouts()

        totalFeatures = len(layouts)
        progressPerFeature = 100.0 / totalFeatures if totalFeatures else 0

        self.composerService = ComposerService(self.project)

        try:

            for index, layout in enumerate(layouts):

                if self.feedback.isCanceled():
                    self.messageService.criticalMessageBar('Exporting maps', 'operation aborted by the user!')
                    break

                result = self.composerService.createLayoutExporter(layout, layout.name())

                if result:
                    self.messageService.logMessage(f'Exporting map from layout {layout.name()}: SUCCESS', 3)

                self.feedback.setProgress(int(index * progressPerFeature))

            self.feedback.setProgress(100)
            self.feedback.close()

            return True

        except Exception as exportException:
            self.messageService.logMessage(f'Error on loading layout template. {exportException}', 2)
            return False
