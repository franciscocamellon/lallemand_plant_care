# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FilterTask
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from typing import Optional
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.PyQt.QtCore import QCoreApplication, Qt
from qgis.core import Qgis, QgsProcessingFeedback
from qgis.PyQt.QtWidgets import QProgressBar
from processing import execAlgorithmDialog, createAlgorithmDialog

from .algorithm_runner import AlgorithmRunner
from ..constants import COMPOSER_LAYERS
from ..services.composer_service import ComposerService
from ..services.layer_service import LayerService
from ..services.message_service import UserFeedback, MessageService


class ComposerLayoutRunner:
    def __init__(self, iface, project):
        self.iface = iface
        self.feedback = UserFeedback(message='Loading...', title='Loading composer layouts')
        self.project = project
        self.filePath = self.project.homePath()
        self.exception = ''
        self.composerService: Optional[ComposerService] = None
        self.layerService = LayerService()
        self.algRunner = AlgorithmRunner()
        self.messageService = MessageService(iface=self.iface)

    def run(self):
        layers = self.project.instance().mapLayers().values()
        contour = self.layerService.filterByLayerName(list(layers), ['_contour_'], inverse=True)

        filteredLayers = self.layerService.filterByLayerName(list(layers), COMPOSER_LAYERS, inverse=True)

        # progressMessageBar = self.iface.messageBar().createMessage("Loading composer templates...")
        # progressBar = QProgressBar()
        # progressBar.setMaximum(len([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
        # progressBar.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        # progressMessageBar.layout().addWidget(progressBar)
        # self.iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)
        #
        # def progress_changed(progress):
        #     # print(progress)
        #     progressBar.setValue(progress)
        #
        # f = QgsProcessingFeedback()
        # f.progressChanged.connect(progress_changed)
        #
        # self.algRunner.runLoadComposerTemplates([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], contour[0], feedback=f)
        # progressBar.setValue(len([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
        # # self.iface.messageBar().clearWidgets()
        parameters = {
            'INPUT_LAYERS': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            'TRIAL_BOUNDS_LAYER': contour[0]
        }
        dialog = createAlgorithmDialog('lpc:loadcomposertemplates', parameters)
        dialog.show()
        dialog.exec_()


"""
        totalFeatures = len(filteredLayers)
        progressPerFeature = 100.0 / totalFeatures if totalFeatures else 0

        self.composerService = ComposerService(self.project)
        layerLayoutMapping = self.composerService.mapLayersToLayouts(filteredLayers)

        try:

            for layer, layoutPath in layerLayoutMapping.items():

                if os.path.isfile(layoutPath):
                    layout = self.composerService.createLayout(contour[0])
                    self.composerService.loadLayoutFromTemplate(layout, layoutPath)
                    self.composerService.updateComposerLayout(layout, layer, contour[0])

                    result = self.project.layoutManager().addLayout(layout)
                    if result:
                        self.messageService.logMessage(f'Loading layout {layout.name()}: SUCCESS', 3)

                progressIndex = list(layerLayoutMapping.keys()).index(layer)
                self.feedback.setProgress(int(progressIndex * progressPerFeature))

            self.feedback.setProgress(100)
            self.feedback.close()

            return True

        except Exception as loadException:
            self.messageService.logMessage(f'Error on loading layout template. {loadException}', 2)
            return False"""
