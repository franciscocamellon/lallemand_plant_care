# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LoadFiles
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from qgis.PyQt import QtWidgets, uic

from ..services.layer_service import LayerService

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), '../../gui/layer_manager/load_files.ui')
)


class LoadFiles(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, iface, project, parent=None):
        """Constructor."""
        super(LoadFiles, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.project = project
        self.layer_services = LayerService(self.iface)

        self.crsWarningLabel.hide()
        self.gpsFileWidget.fileChanged.connect(self.updateCrsLabel)
        self.loadGpsPointsPushButton.clicked.connect(self.load_shape_file)

    def load_shape_file(self):
        # group_name = self.retrieve_group_name(self.harvester_rb.isChecked(), self.gps_rb.isChecked())
        # crs = self.layer_services.load_shape_file(self.project, 'Raw_Data', self.gpsFileWidget.filePath())
        layer = self.layer_services.create_vector_layer(self.layer_services.get_file_name(self.gpsFileWidget.filePath()), self.gpsFileWidget.filePath())

        root = self.project.instance().layerTreeRoot()
        group = root.findGroup('Raw_sdffdfggData')
        if group is not None:
            self.project.instance().addMapLayer(layer, False)
            group.addLayer(layer)

        self.project.instance().addMapLayer(layer)

    def updateCrsLabel(self, path):
        layer = self.layer_services.create_vector_layer(self.layer_services.get_file_name(path), path)
        if layer.crs().isGeographic():
            self.crsWarningLabel.show()
        self.gpsCRSLabel.setText(f'CRS -> {layer.crs().authid()}')

    @staticmethod
    def retrieve_group_name(harvester, gps):
        if harvester:
            return 'Harvester points'
        elif harvester is False and gps is False:
            return None
        else:
            return 'GPS points'
