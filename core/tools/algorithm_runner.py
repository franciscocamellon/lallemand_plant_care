# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeostatisticsTrial
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import processing

from qgis.core import QgsCoordinateReferenceSystem, QgsProcessingUtils, QgsProject
from qgis.PyQt.Qt import QObject


class AlgorithmRunner(QObject):

    def __init__(self):
        super(AlgorithmRunner, self).__init__()
        pass

    @staticmethod
    def _getLayerFromContext(outputDict, context, field=None, returnError=False):
        if field:
            lyr = QgsProcessingUtils.mapLayerFromString(outputDict[field], context)
        else:
            lyr = QgsProcessingUtils.mapLayerFromString(outputDict['Carte_filtree'], context)
        if returnError:
            errorLyr = QgsProcessingUtils.mapLayerFromString(outputDict['error'], context)
            return lyr, errorLyr
        else:
            return lyr

    @staticmethod
    def runWaypointsPolygonsBuilder(layer, method, sorting, sizeBorder, context=None, feedback=None, outputLayer=None):
        outputLayer = 'memory:' if outputLayer is None else outputLayer
        parameters = {
            'Waypoints': layer,
            'Initial_Projection': 0,
            'Reprojection': 0,
            'Methode': method,
            'Variable_ordonnee': sorting,
            'Size_border': sizeBorder,
            'Polygones_traitement': outputLayer
        }
        output = processing.run('r:Waypoints_Polygons_builder_v3_border', parameters, context=context,
                                feedback=feedback)
        return output['Polygones_traitement']

    @staticmethod
    def runReprojectLayer(layer, targetCrs, operation=None, context=None, feedback=None, outputLayer=None):
        outputLayer = 'memory:' if outputLayer is None else outputLayer
        parameters = {
            'INPUT': layer,
            'TARGET_CRS': QgsCoordinateReferenceSystem(targetCrs),
            'OPERATION': operation,
            'OUTPUT': outputLayer
        }
        output = processing.run('native:reprojectlayer', parameters, context=context, feedback=feedback)

        return output['OUTPUT']

    @staticmethod
    def runDropMZValues(layer, context=None, feedback=None, outputLayer=None):
        outputLayer = 'memory:' if outputLayer is None else outputLayer
        parameters = {
            'INPUT': layer,
            'DROP_M_VALUES': True,
            'DROP_Z_VALUES': True,
            'OUTPUT': outputLayer
        }
        output = processing.run('native:dropmzvalues', parameters, context=context, feedback=feedback)

        return output['OUTPUT']

    @staticmethod
    def runDissolvePolygons(layer, context=None, feedback=None, outputLayer=None):
        outputLayer = 'memory:' if outputLayer is None else outputLayer
        parameters = {
            'INPUT': layer,
            'FIELD': [],
            'OUTPUT': outputLayer
        }
        output = processing.run('native:dissolve', parameters, context=context, feedback=feedback)

        return output['OUTPUT']

    def runYieldMapFiltering(self, parameters, context=None, feedback=None):
        output = QgsProcessingUtils.generateTempFilename('OUTPUT.gpkg')
        parameters['Carte_filtree'] = 'TEMPORARY_OUTPUT'

        outputDict = processing.run('r:Yield_map_filtering', parameters, context=context, feedback=feedback)
        return self._getLayerFromContext(outputDict, context)

    def runAddRasterValuesToPoints(self, shape, grid, context=None, feedback=None):

        parameters = {
            'SHAPES': shape,
            'GRIDS': grid,
            'RESAMPLING': 0,
            'RESULT': 'TEMPORARY_OUTPUT'
        }
        output = processing.run("saga:addrastervaluestopoints", parameters, context=context, feedback=feedback)
        return self._getLayerFromContext(output, context, field='RESULT')

    def runBasicStatisticsForFields(self, layer, field, context=None, feedback=None):

        parameters = {
            'INPUT_LAYER': layer,
            'FIELD_NAME': field,
            'OUTPUT_HTML_FILE': 'TEMPORARY_OUTPUT'
        }
        output = processing.run("qgis:basicstatisticsforfields", parameters, context=context, feedback=feedback)

        return output
