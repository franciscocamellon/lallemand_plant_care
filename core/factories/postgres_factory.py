# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PostgresFactory
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

import psycopg2
import psycopg2.extras
import logging
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT


class PostgresFactory:
    def __init__(self, database_name='BD_GEOSTAT_LPC', user='postgres', password='postgres', host='127.0.0.1', port='5432'):
        super(PostgresFactory, self).__init__()
        self.database_name = database_name
        self.user = user
        self.password = password
        self.host = host
        self.port = port
        self._initializeLogging()
        self.connection = self.openConnection()

    @staticmethod
    def _initializeLogging():
        logging.basicConfig(filename=os.path.join(os.path.dirname(__file__), 'postgres_log.log'), level=logging.ERROR)

    def openConnection(self):
        connection = psycopg2.connect(
            database=self.database_name,
            user=self.user,
            password=self.password,
            host=self.host,
            port=self.port
        )
        connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        connection.autocommit = True
        return connection

    def fetchDataToCombobox(self, combobox, query, displayColumns, idColumn, concatSeparator=' '):
        try:
            combobox.clear()
            # connection = self.openConnection()
            result = self.getSqlExecutor(query)

            for row in result:
                displayValue = concatSeparator.join([str(row[column]) for column in displayColumns])
                combobox.addItem(displayValue, row[idColumn])

            return True, combobox

        except Exception as e:
            errorMessage = f"Error executing SQL query: {str(e)}"
            return False, errorMessage

    def fetchOne(self, baseSql, objectId):
        objectSql = baseSql.format(objectId)
        # connection = self.openConnection()
        return self.getSqlExecutor(objectSql)

    def getSqlExecutor(self, sql):
        try:
            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as curs:
                curs.execute(sql)
                result = curs.fetchall()
            return result

        except psycopg2.Error as e:
            error_message = f"Error executing SQL: {e}"
            logging.error(error_message)
            return error_message

    def postSqlExecutor(self, sql, data=None):
        try:
            with self.connection.cursor() as curs:
                if data:
                    curs.execute(sql, data)
                else:
                    curs.execute(sql)
            return True

        except psycopg2.Error as e:
            error_message = f"Error executing SQL: {e}"
            logging.error(error_message)
            return False, error_message

    @staticmethod
    def close_connection(connection):
        connection.close()
