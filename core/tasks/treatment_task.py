# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TreatmentTask
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import (
    QgsTask,
    QgsMessageLog,
    Qgis,
    QgsProcessingContext
)
from qgis.gui import QgisInterface
from qgis.utils import iface

from ..constants import QGIS_TOC_GROUPS
from ..services.layer_service import LayerService
from ..services.message_service import UserFeedback
from ..services.system_service import SystemService
from ..tools.algorithm_runner import AlgorithmRunner
from ...gui.settings.options_settings_dlg import OptionsSettingsPage

iface: QgisInterface


class TreatmentTask(QgsTask):

    def __init__(self, taskParameters, project):
        super().__init__("Treatment task", QgsTask.CanCancel)
        self.taskParameters = taskParameters
        self.reproject = self.taskParameters['reprojection']
        self.polygonBuilder = self.taskParameters['polygonBuilder']
        self.project = project
        self.filePath = self.project.homePath()
        self.userFeedback = UserFeedback()
        self.context = QgsProcessingContext()
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.treatments = OptionsSettingsPage().getTreatmentPolygonsSettings()
        self.exception = ''

    def run(self):

        try:
            layer = self.taskParameters['layer']
            layerName = layer.name()

            treatmentLayer = f"{self.filePath}/00_Data/00_Raw_Files/{f'{layerName}'}_treatment.shp"
            boundaryLayer = ''
            if not self.systemService.fileExist(treatmentLayer, task=True):
                treatmentPolygons = AlgorithmRunner.runWaypointsPolygonsBuilder(self.polygonBuilder['Waypoints'],
                                                                                self.polygonBuilder['Methode'],
                                                                                self.polygonBuilder['Variable_ordonnee'],
                                                                                self.polygonBuilder['Size_border'],
                                                                                feedback=self.userFeedback,
                                                                                outputLayer=self.polygonBuilder['Polygones_traitement'])

                self.layerService.loadShapeFile(QGIS_TOC_GROUPS[0], self.polygonBuilder['Polygones_traitement'])

                if self.taskParameters['boundary']:
                    boundaryLayerName = f'{layerName}_contour'
                    boundaryLayer = f"{self.filePath}/00_Data/00_Raw_Files/{boundaryLayerName}.shp"

                    if not self.systemService.fileExist(treatmentLayer, task=True):
                        AlgorithmRunner.runDissolvePolygons(treatmentPolygons, feedback=self.userFeedback, outputLayer=boundaryLayer)
                        self.layerService.loadShapeFile(QGIS_TOC_GROUPS[0], boundaryLayer)
                    else:
                        raise FileExistsException(f'Sampling file {boundaryLayerName} already exists.')

                if self.reproject['reproject']:
                    epsg = self.reproject['epsg']
                    toReproject = [treatmentLayer, boundaryLayer]
                    for toReprojectFilePath in toReproject:
                        fileName = self.systemService.extractFileName(toReprojectFilePath)
                        reprojectedName = f"{fileName}_{self.reproject['operations'][1]}"
                        outputLayerFilePath = f"{self.filePath}/00_Data/01_Reproject/{reprojectedName}.shp"

                        if not self.systemService.fileExist(outputLayerFilePath, task=True):

                            AlgorithmRunner.runReprojectLayer(toReprojectFilePath, epsg, self.reproject['operations'][3],
                                                              feedback=self.userFeedback, outputLayer=outputLayerFilePath)
                            self.layerService.loadShapeFile(QGIS_TOC_GROUPS[1], outputLayerFilePath)

                        else:
                            raise FileExistsException(f'Sampling file {reprojectedName} already exists.')
            else:
                raise FileExistsException(f'Sampling file {treatmentLayer} already exists.')

            return True

        except Exception as e:
            self.exception = e
            return False

    def finished(self, result):

        if self.isCanceled():

            QgsMessageLog.logMessage(
                message=f"Canceled filter task. {self.progress}% filtered.",
                level=Qgis.Warning,
            )
            return
        elif not result:
            if isinstance(self.exception, FileExistsException):
                QMessageBox.critical(
                    iface.mainWindow(),
                    "File Exists Error",
                    str(self.exception)
                )
            else:
                QMessageBox.critical(
                    iface.mainWindow(),
                    "Treatment polygons task error",
                    f"The following error occurred:\n{self.exception.__class__.__name__}: {self.exception}",
                )
            return
        else:
            iface.messageBar().pushMessage(
                "Success",
                f"Finished treatment polygons task.",
                level=Qgis.Success,
            )

    def cancel(self):
        QgsMessageLog.logMessage(
            message='Task "{name}" was cancelled'.format(name='Sampling task'),
            level=Qgis.Info)
        super().cancel()


class FileExistsException(Exception):
    pass
