# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReportTask
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import (
    QgsTask,
    QgsMessageLog,
    Qgis,
    QgsProcessingContext
)
from qgis.utils import iface

from ..services.layer_service import LayerService
from ..services.message_service import UserFeedback
from ..services.report_service import ReportService
from ..services.system_service import SystemService


class ReportTask(QgsTask):

    def __init__(self, reportData, tableData, imageData, project):
        super().__init__("Report task", QgsTask.CanCancel)
        self.feedback = UserFeedback(message='Creating report...', title='Trial Report')
        self.context = QgsProcessingContext()
        self.project = project
        self.filePath = self.project.homePath()
        self.reportData = reportData
        self.tableData = tableData
        self.imageData = imageData
        self.exception = ''
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.reportService = ReportService()

    def run(self):

        try:

            self.reportService.createWordReport(self.reportData, self.tableData, self.imageData, self.filePath, self.feedback)
            return True

        except Exception as e:
            self.exception = e
            return False

    def finished(self, result):
        if self.isCanceled():
            # if it was canceled by the user
            QgsMessageLog.logMessage(
                message=f"Canceled filter task. {self.progress}% filtered.",
                level=Qgis.Warning,
            )
            return
        elif not result:
            if isinstance(self.exception, FileExistsException):
                QMessageBox.critical(
                    iface.mainWindow(),
                    "File Exists Error",
                    str(self.exception)
                )
            else:
                QMessageBox.critical(
                    iface.mainWindow(),
                    "Filter task error",
                    f"The following error occurred:\n{self.exception.__class__.__name__}: {self.exception}",
                )
            return

        iface.messageBar().pushMessage(
            "Success",
            f"Finished filtering.",
            level=Qgis.Success,
        )


class FileExistsException(Exception):
    pass
