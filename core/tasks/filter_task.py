# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FilterTask
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import (
    QgsTask,
    QgsMessageLog,
    Qgis,
    QgsProcessingContext
)
from qgis.gui import QgisInterface
from qgis.utils import iface

from ..constants import QGIS_TOC_GROUPS
from ..services.layer_service import LayerService
from ..services.message_service import UserFeedback
from ..services.system_service import SystemService
from ..tools.algorithm_runner import AlgorithmRunner

iface: QgisInterface


class FilterTask(QgsTask):
    def __init__(self, filterTaskParameters, project, field):
        super().__init__("Filter task", QgsTask.CanCancel)
        self.feedback = UserFeedback()
        self.context = QgsProcessingContext()
        self.project = project
        self.filePath = self.project.homePath()
        self.yieldField = field
        self.filterTaskParameters = filterTaskParameters
        self.exception = ''
        self.yieldMapVector = ''
        self.layerService = LayerService()
        self.systemService = SystemService()

    def run(self):
        filterParameters = self.filterTaskParameters['filterParameters']
        filteredMapLayerPath = self.filterTaskParameters['filteredMapLayerPath']
        reprojectionParameters = self.filterTaskParameters['reprojectionParameters']
        epsg = reprojectionParameters['epsg']
        outputReprojectLayer = reprojectionParameters['outputReprojectLayer']
        operations = reprojectionParameters['operations']

        try:

            if not self.systemService.fileExist(filteredMapLayerPath, task=True):
                output = AlgorithmRunner().runYieldMapFiltering(filterParameters, context=self.context,
                                                                feedback=self.feedback)

                filteredFeatures = self.layerService.getFeaturesByRequest(output, "\"Biais_rendement\"='F - Pas de biais'")
                self.yieldMapVector = self.layerService.createMemoryVectorLayer(output.wkbType(), 'Yield_Map',
                                                                                output.crs().authid(),
                                                                                fields=output.fields(),
                                                                                features=filteredFeatures)

                if reprojectionParameters['reproject']:
                    if not self.systemService.fileExist(filteredMapLayerPath, task=True):
                        AlgorithmRunner.runReprojectLayer(self.yieldMapVector, epsg, operations,
                                                          context=self.context, feedback=self.feedback,
                                                          outputLayer=outputReprojectLayer)
                    else:
                        raise FileExistsException(f"{reprojectionParameters['layerName']} file already exists.")

                if self.yieldMapVector.isValid():
                    self.layerService.saveVectorLayer(self.yieldMapVector, filteredMapLayerPath)
                    self.layerService.loadShapeFile(QGIS_TOC_GROUPS[0], filteredMapLayerPath)

                    reprojectedLoadedLayer = self.layerService.loadShapeFile(QGIS_TOC_GROUPS[2], outputReprojectLayer)
                    self.layerService.applySymbology(reprojectedLoadedLayer, self.yieldField)

                    yieldHistogramPath = f"{self.filePath}/05_Results/01_Histograms/"

                    yieldStatisticsTable = self.getHistogramParameters(self.yieldMapVector, self.yieldField)
                    self.layerService.populateFrequencyHistogram(self.yieldMapVector, self.yieldField, yieldStatisticsTable,
                                                                 yieldHistogramPath)
                    return True

            else:
                raise FileExistsException('Yield_Map file already exists.')

        except Exception as e:
            self.exception = e
            return False

    def getHistogramParameters(self, layer, field):
        statisticFields = ['COUNT', 'MIN', 'MAX', 'SUM', 'MEAN', 'STD_DEV', 'CV']
        statisticValues = self.getLayerStatistics(layer, field)
        tableData = list()

        for statistic in statisticFields:
            if statistic == 'COUNT':
                tableData.append([f'{float(statisticValues[statistic]):.0f}'])
            else:
                tableData.append([f'{float(statisticValues[statistic]):.2f}'])

        return tableData
    @staticmethod
    def getLayerStatistics(layer, field):
        return AlgorithmRunner().runBasicStatisticsForFields(layer, field)

    def finished(self, result):
        if self.isCanceled():
            # if it was canceled by the user
            QgsMessageLog.logMessage(
                message=f"Canceled filter task. {self.progress}% filtered.",
                level=Qgis.Warning,
            )
            return
        elif not result:
            if isinstance(self.exception, FileExistsException):
                QMessageBox.critical(
                    iface.mainWindow(),
                    "File Exists Error",
                    str(self.exception)
                )
            else:
                QMessageBox.critical(
                    iface.mainWindow(),
                    "Filter task error",
                    f"The following error occurred:\n{self.exception.__class__.__name__}: {self.exception}",
                )
            return

        iface.messageBar().pushMessage(
            "Success",
            f"Finished filtering.",
            level=Qgis.Success,
        )


class FileExistsException(Exception):
    pass
