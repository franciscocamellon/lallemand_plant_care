# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FilterTask
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import (
    QgsTask,
    QgsMessageLog,
    Qgis,
    QgsProcessingContext,
    QgsReadWriteContext,
    QgsLayoutExporter,
    QgsPrintLayout,
    QgsLayoutItemMap
)
from qgis.PyQt.QtXml import QDomDocument
from qgis.gui import QgisInterface
from qgis.utils import iface

from ..constants import QGIS_TOC_GROUPS
from ..services.layer_service import LayerService
from ..services.message_service import UserFeedback
from ..services.system_service import SystemService
from ..tools.algorithm_runner import AlgorithmRunner


class ComposerLayoutTask(QgsTask):
    def __init__(self, project):
        super().__init__("Composer task", QgsTask.CanCancel)
        self.feedback = UserFeedback()
        self.context = QgsProcessingContext()
        self.project = project
        self.filePath = self.project.homePath()
        self.exception = ''
        self.layerService = LayerService()
        self.systemService = SystemService()

    def run(self):

        try:
            layers = self.project.instance().mapLayers().values()
            contour = self.layerService.filterByLayerName(list(layers), ['_contour_'], inverse=True)
            print(contour)
            # Create a new print layout
            layout = QgsPrintLayout(self.project)

            # Load the .qpt template file
            template = QDomDocument()
            # directoryPath = 'core/resources/composer'
            # directoryPath = os.path.dirname(__file__)
            directoryPath = self.layerService.getComposerLayoutPath()
            for filename in os.listdir(directoryPath):
                file_path = os.path.join(directoryPath, filename)
                print(file_path)
                if os.path.isfile(file_path):
                    template.setContent(open(file_path).read())
                    layout.loadFromTemplate(template, QgsReadWriteContext())

                    item = layout.itemById('Map 1')
                    if item and isinstance(item, QgsLayoutItemMap):
                        # Cast the item to QgsLayoutItemMap
                        mapItem = item
                        mapItem.setLayers([contour])

                    # Create an exporter object
                    exporter = QgsLayoutExporter(layout)

                    # Export the layout to a PNG file
                    yieldHistogramPath = f"{self.filePath}/05_Results/03_Maps/{filename}.png"
                    exporter.exportToImage(yieldHistogramPath, QgsLayoutExporter.ImageExportSettings())

            # Exit the QGIS application

        except Exception as e:
            self.exception = e
            return False

    def finished(self, result):
        if self.isCanceled():
            # if it was canceled by the user
            QgsMessageLog.logMessage(
                message=f"Canceled filter task. {self.progress}% filtered.",
                level=Qgis.Warning,
            )
            return
        elif not result:
            if isinstance(self.exception, FileExistsException):
                QMessageBox.critical(
                    iface.mainWindow(),
                    "File Exists Error",
                    str(self.exception)
                )
            else:
                QMessageBox.critical(
                    iface.mainWindow(),
                    "Filter task error",
                    f"The following error occurred:\n{self.exception.__class__.__name__}: {self.exception}",
                )
            return

        iface.messageBar().pushMessage(
            "Success",
            f"Finished filtering.",
            level=Qgis.Success,
        )


class FileExistsException(Exception):
    pass
