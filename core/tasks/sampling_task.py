# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SamplingTask
                                 A QGIS plugin
 Lallemand Plant Care
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import (
    QgsTask,
    QgsMessageLog,
    Qgis,
    QgsProcessingContext
)
from qgis.gui import QgisInterface
from qgis.utils import iface

from ..constants import QGIS_TOC_GROUPS
from ..services.layer_service import LayerService
from ..services.message_service import UserFeedback
from ..services.system_service import SystemService
from ..algorithms.algorithm_runner import AlgorithmRunner
from ...gui.settings.options_settings_dlg import OptionsSettingsPage

iface: QgisInterface


class SamplingTask(QgsTask):

    def __init__(self, widgetLayer, field, project):
        super().__init__("Sampling task", QgsTask.CanCancel)
        self.samplingLayerComboBox = widgetLayer
        self.yieldField = field
        self.project = project
        self.filePath = self.project.homePath()
        self.userFeedback = UserFeedback()
        self.context = QgsProcessingContext()
        self.layerService = LayerService()
        self.systemService = SystemService()
        self.treatments = OptionsSettingsPage().getTreatmentPolygonsSettings()
        self.exception = ''
        self.result = None

    def run(self):

        try:

            layer = self.samplingLayerComboBox.currentLayer()

            for treatment in self.treatments[0]:
                totalLayerName = f'{treatment}_total'
                totalOutputPath = f"{self.filePath}/00_Data/02_Sampling/{totalLayerName}.shp"
                histogramTotalPath = f"{self.filePath}/05_Results/01_Histograms/"

                if not self.systemService.fileExist(totalOutputPath, task=True):
                    selectedFeatures = self.layerService.getFeaturesByRequest(layer, f"\"Traitement\"='{treatment}'")
                    selectedFeaturesLayer = self.layerService.createMemoryVectorLayer(layer.wkbType(), totalLayerName,
                                                                                      layer.crs().authid(),
                                                                                      fields=layer.fields(),
                                                                                      features=selectedFeatures)
                    self.layerService.saveVectorLayer(selectedFeaturesLayer, totalOutputPath)
                    loadedLayer = self.layerService.loadShapeFile(QGIS_TOC_GROUPS[2], totalOutputPath)
                    self.layerService.applySymbology(loadedLayer, self.yieldField)

                    staTotalTable = self.getHistogramParameters(selectedFeaturesLayer, self.yieldField)
                    self.layerService.populateFrequencyHistogram(selectedFeaturesLayer, self.yieldField, staTotalTable,
                                                                 histogramTotalPath)

                    for percent in [80, 20]:

                        percentFeatures, comp = self.layerService.getPercentualFeaturesById(selectedFeaturesLayer, percent)

                        if percent == 80:
                            percentLayerName = f'{treatment}_{percent}_perc'
                            percentLayerPath = f"{self.filePath}/00_Data/02_Sampling/{percentLayerName}.shp"
                            histogramPercentPath = f"{self.filePath}/05_Results/01_Histograms/"

                            if not self.systemService.fileExist(percentLayerPath, task=True):

                                percentFeaturesLayer = self.layerService.createMemoryVectorLayer(
                                    selectedFeaturesLayer.wkbType(),
                                    percentLayerName,
                                    selectedFeaturesLayer.crs().authid(),
                                    fields=selectedFeaturesLayer.fields(),
                                    features=percentFeatures)

                                self.layerService.saveVectorLayer(percentFeaturesLayer, percentLayerPath)
                                loadedLayer = self.layerService.loadShapeFile(QGIS_TOC_GROUPS[2], percentLayerPath)
                                self.layerService.applySymbology(loadedLayer, self.yieldField)

                                staPercentTable = self.getHistogramParameters(percentFeaturesLayer, self.yieldField)
                                self.layerService.populateFrequencyHistogram(percentFeaturesLayer, self.yieldField,
                                                                             staPercentTable,
                                                                             histogramPercentPath)
                            else:
                                raise FileExistsException(f'Sampling file {percentLayerName} already exists.')

                        elif percent == 20:
                            validationLayerName = f'{treatment}_validation'
                            validationLayerPath = f"{self.filePath}/02_Validation/{validationLayerName}.shp"

                            if not self.systemService.fileExist(validationLayerPath, task=True):
                                percentFeaturesLayer = self.layerService.createMemoryVectorLayer(
                                    selectedFeaturesLayer.wkbType(),
                                    validationLayerName,
                                    selectedFeaturesLayer.crs().authid(),
                                    fields=selectedFeaturesLayer.fields(),
                                    features=percentFeatures)
                                validationLayer = self.layerService.createValidationVectorLayer(percentFeaturesLayer)

                                self.layerService.saveVectorLayer(validationLayer, validationLayerPath)
                                self.layerService.loadShapeFile(QGIS_TOC_GROUPS[4], validationLayerPath)

                            else:
                                raise FileExistsException(f'Sampling file {validationLayerName} already exists.')

                else:
                    raise FileExistsException(f'Sampling file {totalLayerName} already exists.')

            return True

        except Exception as e:
            self.exception = e
            return False

    def getHistogramParameters(self, layer, field):
        statisticFields = ['COUNT', 'MIN', 'MAX', 'SUM', 'MEAN', 'STD_DEV', 'CV']
        statisticValues = self.getLayerStatistics(layer, field)
        tableData = list()

        for statistic in statisticFields:
            if statistic == 'COUNT':
                tableData.append([f'{float(statisticValues[statistic]):.0f}'])
            else:
                tableData.append([f'{float(statisticValues[statistic]):.2f}'])

        return tableData

    @staticmethod
    def getLayerStatistics(layer, field):
        return AlgorithmRunner().runBasicStatisticsForFields(layer, field)

    def finished(self, result):

        if self.isCanceled():

            QgsMessageLog.logMessage(
                message=f"Canceled sampling task. {self.progress}% filtered.",
                level=Qgis.Warning,
            )
            return
        elif not result:
            if isinstance(self.exception, FileExistsException):
                QMessageBox.critical(
                    iface.mainWindow(),
                    "File Exists Error",
                    str(self.exception)
                )
            else:
                QMessageBox.critical(
                    iface.mainWindow(),
                    "Sampling task error",
                    f"The following error occurred:\n{self.exception.__class__.__name__}: {self.exception}",
                )
            return

        iface.messageBar().pushMessage(
            "Success",
            f"Finished sampling.",
            level=Qgis.Success,
        )

    def cancel(self):
        QgsMessageLog.logMessage(
            message='Sampling task was cancelled',
            level=Qgis.Info)
        super().cancel()


class FileExistsException(Exception):
    pass
